<?php

namespace App\Modules\Bot;

use Exception;
use App\Models\Baf;
use App\Models\MafiaEvent;
use App\Models\Vote;
use App\Models\Offer;
use App\Models\BotUser;
use App\Models\BuyRole;
use App\Models\Payment;
use App\Models\Product;
use App\Models\Setting;
use App\Models\UserBaf;
use App\Models\Voiting;
use App\Models\BotGroup;
use App\Models\GameRole;
use App\Models\GameUser;
use App\Modules\Bot\Bot;
use App\Models\YesnoVote;
use App\Models\ChatMember;
use App\Models\GamerParam;
use App\Models\GroupTarif;
use App\Models\Withdrawal;
use App\Modules\Functions;
use App\Modules\Game\Game;
use App\Models\UserBuyRole;
use App\Models\UserProduct;
use App\Models\UserWarning;
use App\Models\WarningType;
use App\Models\WarningWord;
use App\Models\CurrencyRate;
use App\Modules\Game\Currency;
use App\Models\UserAchievement;
use App\Models\Game as GameModel;
use App\Models\Image;
use App\Models\Newsletter;
use App\Models\Roulette;
use App\Models\RoulettesCell;
use App\Models\Task as TaskModel;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Modules\Game\GamerFunctions;
use App\Modules\Game\Products\Unwarn;
use App\Modules\Game\RouletteFuncs;
use App\Modules\Payments\FreeKassaSBP;
use App\Modules\Payments\TelegramStarsApi;

class AppBot extends BasicMafBot {
    //use Dialog;
    const SUBSCR_CHANNEL_ID = '-1002001676189';
    const SUBSCR_CHANNEL_URL = 'https://t.me/+SJB_XyawEtQ1NWIy';
    const OFIC_GROUP_ID = '-1002046415969';
    protected $userId;
    protected $hpApi = false;
    protected $qiwiApi = false;
    protected $yoomApi = false;
    protected $mainMenu = [];
     
    public function __construct(string $token,$botId=0, string $imgFolder="img/") {
        $this->updateLocale();
        parent::__construct($token,$botId,$imgFolder);
    }
    public function updateLocale() {
        $this->mainMenu = [
            ['üë§ '.__('–ü—Ä–æ—Ñ–∏–ª—å'),'üõí '.__('–ú–∞–≥–∞–∑–∏–Ω'),'üí∞ '.__('–û–±–º–µ–Ω–Ω–∏–∫')],
            ['üí∏ '.__('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'),'üèÜ '.__('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),'üé≤ '.__('–ò–≥—Ä–∞—Ç—å')],
            ['üëÅ‚Äçüó® '.__('–ú–æ—ë –∏–Ω—Ñ–æ'),'‚öôÔ∏è '.__('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø'),'üí∞ '.__('–ë–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø')]
        ];
    }
    public static $objAppBot = null;

    public static function appBot():self {        
        if(!self::$objAppBot) self::$objAppBot = new self(config('app.tg_token'));
        return self::$objAppBot;
    }

    protected function paramReplacer($messText, $params=null) {
        /*
        if(strpos($messText,'reflink')!==false) {
            $params['reflink'] = "http://t.me/garifinbot?start=".$this->userData($this->userId)['referal_link_id'];
            $params['partner_bal'] =floor($this->userData($this->userId)['bal_of_partners']);
            $params['ref_count'] =TelegramUser::where('referer_id',$this->userId)->count();
        }
        */
        return parent::paramReplacer($messText, $params);
    }
    //—Ä–µ–∂–∏–º —Ç–µ—Å—Ç-–±–æ—Ç–æ–≤

    public function sendAnswer($ans_arr,$user_id) {
     //   Log::channel('daily')->info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $user_id <= ".json_encode($ans_arr,JSON_UNESCAPED_UNICODE));
        $botUser = BotUser::where('id',$user_id)->first();
        if(!$botUser) {
            if($user_id < 0) return parent::sendAnswer($ans_arr,$user_id);

            if(isset($ans_arr[0]['inline_keyboard'])) {
                $commands = [];
                foreach($ans_arr[0]['inline_keyboard']['inline_keyboard'] as $row) {
                    foreach($row as $btn) {
                        $commands[] = $btn['callback_data'];
                    }
                }
                if($commands) {
                    $sel = random_int(0,count($commands)-1);
                    Log::info("–†–µ–∞–∫—Ü–∏—è: ".$commands[$sel]);
                    usleep(50000);
                    $new_ans_arr = $this->prepareAnswer($commands[$sel],$user_id);
                    $this->sendAnswer($new_ans_arr,$user_id);
                }
            }
          //  Log::channel('daily')->info("–ü–æ–ª—É—á–µ–Ω–æ: $user_id <= ".json_encode($ans_arr,JSON_UNESCAPED_UNICODE));
        }
        else return parent::sendAnswer($ans_arr,$user_id);
    }

    public function test() {
        $res['text'] = "<b>–ü–æ–∫—É–ø–∫–∞ xxx</b>
        /n–°—Ç–æ–∏–º–æ—Å—Ç—å 123 $ = 123 RUB";
        $back = 'üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
        $back = 'btnseloffer&1';
        /*
        $res['keyboard'] = [[
            ['text'=>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 'web_app'=>["url"=>route("payment.start",['offer'=>1])]]
        ]];
        */
        $res['inline_keyboard']['inline_keyboard'] =[[
            ['text'=>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å","web_app"=>["url"=>route("payment.start",['offer'=>1])]],
           // ['text'=>"<< –ù–∞–∑–∞–¥","calback_data"=>$back]
        ]];
       // $this->getApi()->sendMessage()
        $this->getApi()->sendRawMessage(['chat_id'=>'376753094', 'text'=>'–ü—Ä–∏–≤–µ—Ç',
        'reply_markup'=>json_encode($res['inline_keyboard'])
        ]);

        //$this->sendAnswer([$res],'376753094');

    }
    public function myinfoMessage($chat_id) {
        $res['text'] = "<b>üîê ".__('–ö—É–ø–ª–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:')."</b>\n";
        //–µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        $date = date('Y-m-d H:i:s');
        $pcFirst = UserProduct::with('product')->where('user_id',$chat_id)->whereNotNull('avail_finish_moment')->where('avail_finish_moment','>',$date);
        $productCollection = UserProduct::with('product')->where('user_id',$chat_id)->where('is_deactivate',0)->union($pcFirst)->get(); //->where('avail_finish_moment','>',$date)
        if($productCollection->count()) {
            $iter=1;
            foreach($productCollection as $uproduct) {
                if($uproduct->avail_finish_moment && $uproduct->avail_finish_moment<$date) continue;
                //$res['text'] .= "\n".($iter++).".<b>". $uproduct->product."</b>".($uproduct->avail_finish_moment ? " –≤ –≥—Ä—É–ø–ø–µ <i>{$uproduct->group}</i>\n <b>–∞–∫—Ç–∏–≤–µ–Ω –¥–æ:</b> ".Functions::rusDateTime($uproduct->avail_finish_moment,3)."(–ú–°–ö)" : "");
                
                
                if(!$uproduct->avail_finish_moment) {
                    $res['text'] .= "\n".__('project.buyed_option',['number'=>$iter++, 'name'=>$uproduct->product]);
                    $res['inline_keyboard']['inline_keyboard'][]=
                    [['text'=>"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {$uproduct->product}","callback_data"=>"activateuprod&".$uproduct->id]];
                }
                else {
                    $res['text'] .= "\n".__('project.buyed_option_active',['number'=>$iter++, 'name'=>$uproduct->product,'finish_moment'=>Functions::rusDateTime($uproduct->avail_finish_moment,3)]);
                }
            }
        }
        else {
            $res['text'] .= "\n".__('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.');
        }
        $res['text'] .= "\n\n<b>‚õîÔ∏è ".__('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:')."</b>\n\n";
        //–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        $uwarns = UserWarning::selectRaw("group_id, count(*) as cnt")->where('user_id',$chat_id)
        ->groupBy('group_id')->get();
        if($uwarns->count()>0) {
            $vtexts = [];
            foreach($uwarns as $uwarn) {
                $vtexts[] = ''.$uwarn->group.": ".$uwarn->cnt;
            }
            $res['text'] .=implode("\n",$vtexts);
        }
        else {
            $res['text'] .= "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.";
        }
        return $res;
    }
    public function profileMessage($chat_id) {
        $user = BotUser::where('id',$chat_id)->first();
        $res['text'] = "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>
        \nüìùID: {$chat_id}\nüë§{$user}
        \nüí∂ –í–∏–Ω–¥–±–∞–∫—Å—ã: ".$user->getBalance(Currency::R_WINDBUCKS).
        "\nü™ô –í–∏–Ω–¥–∫–æ–∏–Ω—ã: ".$user->getBalance(Currency::R_WINDCOIN)."
        \n<b>–°–µ–∑–æ–Ω–Ω—ã–µ:</b>\n‚ùÑÔ∏è–°–Ω–µ–∂–∏–Ω–∫–∏: ".$user->getBalance(Currency::S_WINTER).
        "\nüê∞–ü–∞—Å—Ö–∞–ª—å–Ω—ã–π –∫—Ä–æ–ª–∏–∫: ".$user->getBalance(Currency::S_SPRING).
        "\nüåû–°–æ–ª–Ω—ã—à–∫–æ: ".$user->getBalance(Currency::S_SUMMER).
        "\nüéÉ–î—É—Ö –•—ç–ª–ª–æ—É–∏–Ω–∞: ".$user->getBalance(Currency::S_AUTUMN);

        $bafs = Baf::all();
        $userbafs = UserBaf::where('user_id',$chat_id)->get();
        $ubafArr = [];
        foreach($userbafs as $ubaf) {
            $ubafArr[$ubaf->baf_id] = $ubaf;
        }
        $messtextarr = [];
        $bstatuses = ['‚ùå','‚úÖ'];
        foreach($bafs as $baf) {
            $ubaf = $ubafArr[$baf->id] ?? null;
            $amount = $ubaf ? $ubaf->amount : 0;
            if(!$amount) $status = "";
            else if($ubaf->is_activate) $status = $bstatuses[1];
            else $status = $bstatuses[0];
            if($amount) {
                $res['inline_keyboard']['inline_keyboard'][]=
                [['text'=>"–ò–∑–º–µ–Ω–∏—Ç—å {$baf->name}","callback_data"=>"changeubaf&".$ubaf->id]];
            }
            $messtextarr[] = $baf->name.': '.$amount." $status";
        }
        $res['text'] .= "\n\n".implode("\n",$messtextarr);
        $winCollection = GameUser::where('user_id',$chat_id)->where('is_active',2)->get();
        $gameCollection = GameUser::where('user_id',$chat_id)->get();

        $res['text'] .= "\n\n–ü–æ–±–µ–¥: ".$winCollection->count();
        $res['text'] .= "\n–í—Å–µ–≥–æ –∏–≥—Ä: ".$gameCollection->count();


        //—Ä–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ
        $uRole = UserBuyRole::where('user_id',$chat_id)->whereNull('game_id')->orderByDesc('id')->first();
        if($uRole) {
            $res['text'] .= "\n<b>–†–æ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ: </b>".$uRole->role;
        }
        return $res;
    }
    public function settingModelSwitchMessage($messTitle,$group_id, $setkey, $class, $descr, $inline_cmd)  //–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π –∏ –±–∞—Ñ–æ–≤
    {
        $bstatuses = ['‚ùå','‚úÖ'];
        $res['text'] = "<b>$messTitle</b>\n\n";
        $set_models = Setting::groupSettingValue($group_id,$setkey);
        if($set_models !== 'all') $set_models = json_decode($set_models,true);
        $dbModels = $class::all();
        $index = 1;
        $messArr = [];
        foreach($dbModels as $model) {
            $messArr[] = $index.'. '.$model.': '.$bstatuses[$model->switchStatus($set_models)];
            $index++;
        }
        $res['text'] .= implode("\n",$messArr);
        $res['text'] .= "\n\n<i>$descr</i>";
        $res['inline_keyboard'] = $this->inlineKeyboard($dbModels,2,$inline_cmd."&".$group_id."&",false,'id','name');
        $res['inline_keyboard']['inline_keyboard'][] = [['text'=>"<< –ù–∞–∑–∞–¥", 'callback_data'=>"changegrpset&".$group_id]];
        return $res;
    }
    public function editSettingSwitchBFRLMessage($command,$chat_id,$callback_id,$setkey,$messTitle,$descr,$callback_cmd,$class ) {
        $cmd_arr = explode('&',$command);
        $group_id = $cmd_arr[1];
        $role_id =  $cmd_arr[2];
        $set_models = Setting::groupSettingValue($group_id,$setkey);
        if($set_models === 'all') $set_models = [];
        else $set_models = json_decode($set_models,true);

        $set_models[$role_id] = $set_models[$role_id] ?? 1;
        $set_models[$role_id] = $set_models[$role_id] ? 0 : 1;
        Setting::changeGroupSettingValue($group_id,$setkey,json_encode($set_models));
        $message = $this->settingModelSwitchMessage($messTitle,$group_id,$setkey,$class,
            $descr,$callback_cmd);

        $grpmess['chat_id'] = $chat_id;
        $grpmess['message_id'] = $callback_id;
        $grpmess['parse_mode'] = 'HTML';
        $grpmess['text'] = $message['text'];
        $grpmess['reply_markup'] = json_encode($message['inline_keyboard']);
        try {
            $this->getApi()->editMessageText($grpmess);
        }
        catch(Exception $e) {
            Log::error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å269: ".$e->getMessage());
        }
    }
    public function offerKeyboard($parent_id=0, $month=null, $backcmd = null) {
        $offers = Offer::where('parent_id', $parent_id)->get();
        $btnOffers = [];
        $month = $month ?? date('m');
        foreach($offers as $offer) {
         //   if($offer->price > 0 && $offer->price < 5) continue;
            if($offer->where_access === 'always') {
                $of = ['id'=>$offer->id,'btnname'=>$offer->btnname];
                if($backcmd) $of['id'] .= "&".$backcmd;
                $btnOffers[] = $of;
            }
            else {
                $access = explode(',',$offer->where_access);
                if(in_array($month,$access)) {
                    $of = ['id'=>$offer->id,'btnname'=>$offer->btnname];
                    if($backcmd) $of['id'] .= "&".$backcmd;
                    $btnOffers[] = $of;
                }
            }
        }
        return $this->inlineKeyboard($btnOffers,3,"btnseloffer&",true,'id','btnname');
    }
    public function prepareAnswer($command,$chat_id,$callback_id=false,$hookUpdate=[]) {

        // Log::info('PrepareAnswer', [
        //     'command'       => print_r($command, true),
        //     'group_id'      => $chat_id,
        //     '$callback_id'  => print_r($callback_id, true),
        //     'hookUpdate'    => print_r($hookUpdate, true)
        // ]);
        $res = [];
        $prefix = explode('_', $command);
        
        //–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        if(MafiaEvent::ifDoubleClick([$prefix[0] == 'prezident' ? $command : $prefix[0],$chat_id])) {
            return [];
        }

        if(isset($hookUpdate['callback_query']) && $callback_id && strpos($command,'changeubaf')===false
        && strpos($command,'changesetr1role')===false && strpos($command,'changesetr1bafs')===false
        && strpos($command,'roultcellsell')===false) {
            try {
                $this->getApi()->deleteMessage(['chat_id'=>$chat_id,'message_id'=>$callback_id]);
            }
            catch(Exception $e) {}
        }
        else {  //—ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–º–µ—Ä—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            $command = $this->getCmd($command,$chat_id);
        }

        if($callback_id && $callback_id > 0)
            $this->setUserMessageIdIfGameIsActive($chat_id, $callback_id);

        /* —É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        if(strpos($command,'/start')===false) { //–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç
            //—Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            try {
                $chm = $this->getApi()->getChatMember(['chat_id'=>self::SUBSCR_CHANNEL_ID,'user_id'=>$chat_id]);
                if($chm->status === 'left') {
                    $res['text'] = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª ".self::SUBSCR_CHANNEL_URL;
                    return [$res];
                }
            }
            catch(Exception $e) { 
                Log::error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ $chat_id –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –∫–∞–Ω–∞–ª–µ");
            }
        } */

        if(strpos($command, 'krasotkavisit')!==false) {
            $subcommand = explode('_', $command);
            //–∫—Ä–∞—Å–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –ø–æ—Å–µ—â–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ –∑–∞ –∏–≥—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
            if(GamerParam::where('param_name', 'krasotka_select')
                ->where('param_value', $subcommand[1])
                ->first()) {
                //$res['text'] = 'üíÉ–ö—Ä–∞—Å–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∫ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –∏–≥—Ä–æ–∫—É –∑–∞ –∏–≥—Ä—É...';
                return [];
            }
        }

        if($command === '/roulette') {
            $img = Image::where('id',1)->first();
            $res[$img->media_type] = $img->file_id;
            $res['not_file'] = 1;
            //–ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏
            $user = BotUser::where('id',$chat_id)->first();
            if(!$user) return [['text'=>"–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"]];
            $cur = Currency::seasonCurOfMonth();
            $isCur = $user->decBalance($cur, 1);
            if($isCur) {
                $res['text'] = "<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞</b>
1 –∫–æ–∏–Ω: 60%

1 —Å–µ–∑–æ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: 30%

200 –≤–∏–Ω–¥ –±–∞–∫—Å–æ–≤: 90%

–¢–∞—Ä–≥–µ—Ç –Ω–∞ 2 –Ω–æ—á–∏: 10%

–õ—é–±–æ–π –∏–∑ –±–∞—Ñ–æ–≤ (1): 70%

–ö—É—à - 25 —Ç—ã–∫–≤: 1%

–ö—É—à- 50 –∫–æ–∏–Ω–æ–≤: 1% \n\n–ó–∞ 12-—é —Å—É–Ω–¥—É–∫–∞–º–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã–∏–≥—Ä—ã—à. –ù–∞–π–¥–∏—Ç–µ —ç—Ç–∏ —Å—É–Ω–¥—É–∫–∏";
                $roulette = Roulette::generateRoulette($chat_id);
                $res['inline_keyboard'] = $this->inlineKeyboard($roulette->cells,5,'roultcellsell&'.$roulette->id."&",
            false,'id','caption');                
            }
            else {
                $curNames = Currency::allCurrencies();
                $res['text'] = "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ—Ç–µ—Ä–∏–∏ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1".$curNames[$cur];
                $offer = Offer::where('parent_id', 0)->where('product',$cur)->first();
                if($offer) {
                    $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'callback_data'=>'btnseloffer&'.$offer->id."&buyothers"]];
                }
            }
            return [$res];
        }
        if($command === 'closerulete') {
            $res['text'] = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É.
            \n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /roulette";
            return [$res];
        }
        if(strpos($command,'roultcellsell&')!==false) {
            $cmd_arr = explode('&',$command);
            //—á—Ç–æ –º—ã –æ—Ç–∫—Ä—ã–ª–∏----------------------------------------
            $cell = RoulettesCell::where('id',$cmd_arr[2])->first();
            if($cell->is_open) { //–∏–≥–Ω–æ—Ä–∏–º –Ω–∞–∂–∞—Ç–∏–µ. —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
                return [];
            }
            $cell->is_open = 1;
            $cell->save();
            //------------------------------------------------------
            $roulette = Roulette::where('id',$cmd_arr[1])->first();
            $arr = array_column($roulette->cells->all(),'is_open');
            $cost = array_sum($arr);
            $newCost = $cost + 1;
            $cur = Currency::seasonCurOfMonth();
            $curNames = Currency::allCurrencies();
            $user = BotUser::where('id',$chat_id)->first();
            if($cost > 1) {                
                if(!$user->decBalance($cur, $cost)) {
                    $res['text'] = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å $cost".$curNames[$cur];
                    $cell->is_open = 0;
                    $cell->save(); //–∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                    $roulette = Roulette::where('id',$cmd_arr[1])->first(); //–ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç –∑–∞–Ω–æ–≤–æ —á—Ç–æ–± –Ω–µ –∑–∞—Å–≤–µ—Ç–∏—Ç—å —è—á–µ–π–∫—É
                    $offer = Offer::where('parent_id', 0)->where('product',$cur)->first();
                    if($offer) {
                        $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'callback_data'=>'btnseloffer&'.$offer->id."&buyothers"]];
                    }
                    return [$res];
                }
            }
            
            if($cell->prize_id) {
                $res['caption'] = "üî•–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {$cell->prize}.";
                $func = $cell->prize->add_function;
                RouletteFuncs::$func($user);
            }
            else {
                $res['caption'] = "–í —ç—Ç–æ–º —Å—É–Ω–¥—É–∫–µ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.";
            }
            
            $res['caption'] .= "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞ —ç—Ç–æ–º –∏–≥—Ä—É, –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å—É–Ω–¥—É–∫ –∑–∞ $newCost".$curNames[$cur];
            $ikb = $this->inlineKeyboard($roulette->cells,5,'roultcellsell&'.$roulette->id."&",
            false,'id','caption');
            $ikb['inline_keyboard'][]=[$this->inlBtn("–ó–∞–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É","closerulete")];
            $res['reply_markup'] = json_encode($ikb);
            $res['chat_id'] = $chat_id;
            $res['message_id'] = $callback_id;
            try {
                $this->getApi()->editMessageCaption($res);
            }   
            catch(Exception $e) {
                Log::error("roultcellsell ... ".$e->getMessage());
            }
            return [];
        }
        if($command === "create newsletter" && in_array($chat_id,$this->admins)) {
            $res['text'] = "–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ä–∞–∑—É –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –º–µ–¥–∏–∞ –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç";
            $this->addCmd("addnewsletter&",$chat_id);
            return [$res];
        }
        if(strpos($command,"addnewsletter&")!==false) {            
            $mess = [              
                'from_chat_id'=>$chat_id,  
                'message_id' =>$callback_id
            ];
            $nlet = Newsletter::create(['message'=>json_encode($mess)]);
            $mess['chat_id'] = $chat_id;            
            $this->getApi()->copyMessage($mess);
            $res['text'] = "–†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í–æ—Ç ‚òùÔ∏è –∫–∞–∫ –µ–µ —É–≤–∏–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?";
            $res['inline_keyboard']['inline_keyboard'] = [[$this->inlBtn("–ó–∞–ø—É—Å—Ç–∏—Ç—å","sendnewl&".$nlet->id)], [$this->inlBtn("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å","create newsletter")]];
            return [$res];
        }
        if($command === '/addresource' && in_array($chat_id,$this->admins) ) {
            $res['text'] = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—Å—É—Ä—Å...";
            $this->addCmd("sendingres&",$chat_id);
            return [$res];
        }
        if(strpos($command,"sendingres&")!==false) {
            $mess = $hookUpdate['message'];
            $file_id = null;
            $type = null;
            if(isset($mess['photo'])) {
                $photo = array_pop($mess['photo']);
                $file_id = $photo['file_id'];
                $type = 'photo';
            }
            if(isset($mess['video'])) {
                $file_id = $mess['video']['file_id'];
                $type = 'video';
            }
            if($file_id) {
                $img = Image::create(['file_id'=>$file_id,'media_type'=>$type]);
                $res['text'] = "–†–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω. ID = ".$img->id;                
            }
            else {
                $res['text'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å";
            }
            return [$res];
        }
        if(strpos($command,"sendnewl&")!==false) {
            $cmd_arr = explode("&",$command);
            $nlet = Newsletter::where('id',$cmd_arr[1])->first();
            if($nlet) {
                $nlet->status = 1;
                $nlet->save();
            }
            $res['text'] = "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞";
            return [$res];
        }
        if($this->clearCommand($command) === '–ü—Ä–æ—Ñ–∏–ª—å' || $this->clearCommand($command) === 'Profile') {
            //–æ–±–Ω–æ–≤–∏–º –∏–º–µ–Ω–∞
            $user = BotUser::where('id',$chat_id)->first();
            $updates = $hookUpdate;
            $params = [
                'nick_name'=>empty($updates["message"]["from"]["username"]) ? null : $updates["message"]["from"]["username"],
                'first_name'=>$updates['message']['from']['first_name'] ?? null,
                'last_name'=>$updates['message']['from']['last_name']  ?? null,
            ];
            $user->fill($params);
            $user->save();

            $res = $this->profileMessage($chat_id);
            return [$res];
        }
        if($this->clearCommand($command) === '–ú–æ—ë –∏–Ω—Ñ–æ' || $this->clearCommand($command) === 'My info') {
            $res = $this->myinfoMessage($chat_id);
            return [$res];
        }
        if($this->clearCommand($command) === '–ë–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø' || $this->clearCommand($command) === 'Balance group' || $this->clearCommand($command) === 'Group balance') {
            $groups = BotGroup::where('who_add',$chat_id)->get();            
            if($groups->count()) {                
                $rows = [];
                $sum = 0;
                foreach($groups as $grp) {
                    $rows[] = "$grp : {$grp->balance}ü™ô";
                    $sum += $grp->balance;
                }
                $res['text'] = "<b>–ë–∞–ª–∞–Ω—Å—ã –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:</b>\n\n".implode("\n",$rows);
                $res['text'] .="\n\n<b>–ò—Ç–æ–≥–æ: {$sum}ü™ô</b>";
                $res['inline_keyboard']['inline_keyboard'] = [
                    [$this->inlBtn('–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞',"grpbalancetob")],
                    [$this->inlBtn('–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Å—á–µ—Ç',"grpbalanceout")]
                ];
            }
            else {
                $res['text'] = "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É";
            }
            return [$res];
        }
        if($command === 'grpbalancetob') {
            $balance = BotGroup::userGroupsBalance($chat_id);
            $res['text'] = "<b>–í—ã–≤–æ–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞</b>
            \n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ $balance ü™ô
            \n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?";
            $sums = [5,10,15,20,25,50,100,200,500,750,1000];
            $preBtns = [];
            for($si = 0;$si < count($sums); $si++) {
                if($sums[$si] > $balance) break;
                $preBtns[] = [$sums[$si] => $sums[$si]."ü™ô"];
            }
            $res['inline_keyboard'] = $this->inlineKeyboard($preBtns,3,"seloutblntob&");
            $res['inline_keyboard']['inline_keyboard'][] = [$this->inlBtn("–í—Å—é —Å—É–º–º—É","seloutblntob&all")];
            return [$res];
        }
        if($command === 'grpbalanceout') {
            $balance = BotGroup::userGroupsBalance($chat_id);
            $res['text'] = "<b>–í—ã–≤–æ–¥ –Ω–∞ —Å—á–µ—Ç –≤ FKWallet</b>
            \n–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ $balance ü™ô. –ö—É—Ä—Å –≤—ã–≤–æ–¥–∞ 100ü™ô = 9$. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å—á–µ—Ç 200ü™ô";
            if($balance < 200) $res['text'] .= "\n<b><i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞</i></b>";
            else {
                $res['text'] .= "\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?";
                $sums = [200,500,750,1000,1500,2000];
                $preBtns = [];
                for($si = 0;$si < count($sums); $si++) {
                    if($sums[$si] > $balance) break;
                    $preBtns[] = [$sums[$si] => $sums[$si]."ü™ô"];
                }
                $res['inline_keyboard'] = $this->inlineKeyboard($preBtns,3,"seloutblnout&");
                $res['inline_keyboard']['inline_keyboard'][] = [$this->inlBtn("–í—Å—é —Å—É–º–º—É","seloutblnout&all")];
            }
            return [$res];
        }
        if(strpos($command,'seloutblntob&')!==false) {
            $cmd_arr = explode('&',$command);
            $groupsBalance = BotGroup::userGroupsBalance($chat_id);
            if($cmd_arr[1] == 'all') { //–≤—ã–≤–æ–¥ –≤—Å–µ–π —Å—É–º–º—ã
                $balance = $groupsBalance;                     
            }
            else if(is_numeric($cmd_arr[1])) {
                $balance = (int) $cmd_arr[1];
            }
            else $balance = 0;
            //—Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø - –∑–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if($balance > $groupsBalance) {
                $res['text'] = "–°—É–º–º–∞ $balance ü™ô –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞. –ù–∞ –±–∞–ª–∞–Ω—Å–µ –≥—Ä—É–ø–ø –≤—Å–µ–≥–æ $groupsBalance ü™ô";
            }
            else if($balance > 0) {
                $infoBalances = [];
                if($balance == $groupsBalance) $infoBalances = BotGroup::clearBalances($chat_id);
                else {
                    $sum = 0;
                    $groups = BotGroup::where('who_add',$chat_id)->get();
                    foreach($groups as $grp) {
                        $sum += $grp->balance;
                        if($grp->balance > 0) $infoBalances[$grp->id] = $grp->balance;
                        if($sum >= $balance) {
                            $delta = $sum - $balance;
                            $grp->balance = $delta;
                            $infoBalances[$grp->id] -= $delta;
                            $grp->save();    
                            break;
                        }
                        $grp->balance = 0;
                        $grp->save();
                    }
                }
                Withdrawal::create(['user_id'=>$chat_id,'groups'=>json_encode($infoBalances),'amount'=>$balance,'way'=>1,'status'=>1]);
                $user = BotUser::where('id',$chat_id)->first();
                $user->addBalance(Currency::R_WINDCOIN,$balance);
                $res['text'] = "–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ $balance ü™ô";
            }
            else {
                $res['text'] = "–ù–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å";
            }
            return [$res];
        }
        if(strpos($command,'seloutblnout&')!==false) {
            $cmd_arr = explode('&',$command);
            $groupsBalance = BotGroup::userGroupsBalance($chat_id);
            if($cmd_arr[1] == 'all') { //–≤—ã–≤–æ–¥ –≤—Å–µ–π —Å—É–º–º—ã
                $balance = $groupsBalance;                     
            }
            else if(is_numeric($cmd_arr[1])) {
                $balance = (int) $cmd_arr[1];
            }
            else $balance = 0;
            //—Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø - –∑–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if($balance < 200) {
                $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ 200ü™ô";
            }
            if($balance > $groupsBalance) {
                $res['text'] = "–°—É–º–º–∞ $balance ü™ô –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞. –ù–∞ –±–∞–ª–∞–Ω—Å–µ –≥—Ä—É–ø–ø –≤—Å–µ–≥–æ $groupsBalance ü™ô";
            }
            else {
                $infoBalances = [];
                if($balance == $groupsBalance) $infoBalances = BotGroup::clearBalances($chat_id);
                else {
                    $sum = 0;
                    $groups = BotGroup::where('who_add',$chat_id)->get();
                    foreach($groups as $grp) {
                        $sum += $grp->balance;
                        if($grp->balance > 0) $infoBalances[$grp->id] = $grp->balance;
                        if($sum >= $balance) {
                            $delta = $sum - $balance;
                            $grp->balance = $delta;
                            $infoBalances[$grp->id] -= $delta;
                            $grp->save();    
                            break;
                        }
                        $grp->balance = 0;
                        $grp->save();
                    }
                }
                $wzdr = Withdrawal::create(['user_id'=>$chat_id,'groups'=>json_encode($infoBalances),'amount'=>$balance,'way'=>2,'status'=>0]);
                $sumUsd = number_format(round($balance * 0.09, 2),2,',',' ');

                $res['text'] = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞. –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ #{$wzdr->id}.\n–°—É–º–º–∞ $balance ü™ô = $sumUsd $
                \n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω";
                $adm['text'] = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{$wzdr->id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ".Game::userUrlName(BotUser::where('id',$chat_id)->first()).
                "\n–°—É–º–º–∞ –∑–∞—è–≤–∫–∏: $balance ü™ô = $sumUsd $";
                $adm['inline_keyboard']['inline_keyboard'] = [
                    [$this->inlBtn('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥','seloutblnoutaccept&'.$wzdr->id)],
                    [$this->inlBtn('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥','seloutblnoutcancel&'.$wzdr->id)]
                ];
                foreach($this->admins as $admId) {
                    $this->sendAnswer([$adm],$admId);
                }
            }            
            return [$res];
        }
        if(strpos($command,'seloutblnoutaccept&')!==false) {
            $cmd_arr = explode('&',$command);
            $wzdr = Withdrawal::where('id',$cmd_arr[1])->where('status',0)->first();
            if($wzdr) {
                $wzdr->status = 1;
                $wzdr->save();
                $res['text'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞—è–≤–∫—É {$wzdr->id}";
                $usermess['text'] = "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{$wzdr->id} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞</b>";
                $this->sendAnswer([$usermess],$wzdr->user_id);
            }
            else {
                $res['text'] = "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞";
            }
            return [$res];
        }
        if(strpos($command,'seloutblnoutcancel&')!==false) {
            $cmd_arr = explode('&',$command);
            $wzdr = Withdrawal::where('id',$cmd_arr[1])->where('status',0)->first();
            if($wzdr) {
                $wzdr->status = 2;
                $wzdr->save();
                $res['text'] = "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É {$wzdr->id}";
                $usermess['text'] = "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{$wzdr->id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>. –ü–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –µ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏";
                $this->sendAnswer([$usermess],$wzdr->user_id);
            }
            else {
                $res['text'] = "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞";
            }
            return [$res];
        }
        if($this->clearCommand($command) === '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' || $this->clearCommand($command) === 'Replenishment') {
            $res['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å";
            $res['inline_keyboard'] = $this->offerKeyboard(0,null,'üí∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
            return [$res];
        }
        if(strpos($command,'buyoffer&')!==false) {
            $cmd_arr = explode('&',$command);
            $offer = Offer::where('id',$cmd_arr[1])->first();
            if(!$offer) return [];
            if($cmd_arr[2] == 'tlgstars') {
                $tlgStarsApi = new TelegramStarsApi;
                $tlgStarsApi->createOrder($chat_id,TelegramStarsApi::usdToXTR($offer->price),$offer->id);
                return [];
            }
            if($cmd_arr[2] == 'freekassa') {
                $botUser = BotUser::where('id',$chat_id)->first();
                $res['text'] = "<b>–ü–æ–∫—É–ø–∫–∞ ".$offer->name."</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å {$offer->price} $\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥:</b> –û–ø–ª–∞—Ç–∞ –°–ë–ü
                \n<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫—Ä—ã–≤—à–µ–≥–æ—Å—è –æ–∫–Ω–∞ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN</i>";

                /*                
                $rubPrice = CurrencyRate::calcCurrencySum('USD',$offer->price,'RUB');
                */
                $fk = new FreeKassaSBP();
                $fkOrder = $fk->createOrder($botUser->id,$offer->price * 1.25,$offer->id,'USD');
                /*
                $res['inline_keyboard']['inline_keyboard'] =[[
                    ['text'=>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å","web_app"=>["url"=>route("payment.start",['offer'=>$offer->id])]],
                ]];*/
                $res['inline_keyboard']['inline_keyboard'] =[[
                    ['text'=>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å","web_app"=>["url"=>$fkOrder['location'] ]],
                ]];
                $res['saver'] = new MessageResultSaver($botUser);
                return [$res];
            }
            return [];
        }
        if(strpos($command,'btnseloffer&')!==false) {
            $cmd_arr = explode('&',$command);
            $offer = Offer::where('id',$cmd_arr[1])->first();
            if(!$offer) return [];
            $res = [];
            if($offer->price > 0) {
                $botUser = BotUser::where('id',$chat_id)->first();
                $res['text'] = "<b>–ü–æ–∫—É–ø–∫–∞ ".$offer->name."</b>
                \n–°—Ç–æ–∏–º–æ—Å—Ç—å {$offer->price} $
                \n<i>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</i>"; //.CurrencyRate::calcCurrencySum('USD',$offer->price,'RUB')." RUB";
                $res['inline_keyboard']['inline_keyboard'] =[[
                    ['text'=>"üåü Telegram Stars","callback_data"=>"buyoffer&".$cmd_arr[1]."&tlgstars"],
                ]];
                //if($offer->price >= 5) {
                    $res['inline_keyboard']['inline_keyboard'][] = [['text'=>"üí≥ –û–ø–ª–∞—Ç–∞ –°–ë–ü","callback_data"=>"buyoffer&".$cmd_arr[1]."&freekassa"]];
                //}
                if(!empty($cmd_arr[2])) {
                    array_shift($cmd_arr); array_shift($cmd_arr);
                    $nazadCmd = implode("&",$cmd_arr);
                    $res['inline_keyboard']['inline_keyboard'][] = [['text'=>"<< –ù–∞–∑–∞–¥",'callback_data'=>$nazadCmd]];
                }
                /*
                $res['inline_keyboard']['inline_keyboard'] =[[
                    ['text'=>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å","web_app"=>["url"=>route("payment.start",['offer'=>$offer->id])]],
                ]];
                $res['saver'] = new MessageResultSaver($botUser);
                */
            }
            else {
                $res['text'] = $offer->name;
                $res['inline_keyboard'] = $this->offerKeyboard($offer->id,null,$command);
                if(!empty($cmd_arr[2])) {
                    array_shift($cmd_arr); array_shift($cmd_arr);
                    $nazadCmd = implode("&",$cmd_arr);
                    $res['inline_keyboard']['inline_keyboard'][] = [['text'=>"<< –ù–∞–∑–∞–¥",'callback_data'=>$nazadCmd]];
                }
            }
            return [$res];
        }
        if($command === '/add_warning_words') {
            $groups = BotGroup::where('who_add',$chat_id)->get();
            if($groups->count()>0) {
                $res['text'] = "–î–ª—è –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?";
                $res['inline_keyboard'] = $this->inlineKeyboard($groups,1,"addwarnselgrp&",false,'id','title');
            }
            else {
                $res['text'] = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã";
            }
            return [$res];
        }
        if(strpos($command, "produnwarn&")!==false) {
            $cmd_arr = explode('&',$command);
            $uprod = UserProduct::where('id',$cmd_arr[1])->first();
            if($uprod && !$uprod->was_used) {
                $unwarn = new Unwarn($uprod);
                $res = $unwarn->activate(['group_id'=>$cmd_arr[2]]);
            }
            else {
                $res['text'] = "–ê–Ω–≤–∞—Ä–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω";
            }
            return [$res];
        }
        if($this->clearCommand($command) === '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø' || $this->clearCommand($command) === 'Group settings' || $this->clearCommand($command) === 'Settings group') {
            $userGroups = BotGroup::where('who_add',$chat_id)->get();
            if($userGroups->count() < 1) {
                $res['text'] = "–ù–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –≥—Ä—É–ø–ø, –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–º";
            }
            else {
                $res['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å";
                $ugList = [];
                foreach($userGroups as $ug) {
                    try {
                        $chatMember = $this->getApi()->getChatMember(['chat_id'=>$ug->id,'user_id'=>$chat_id]);
                    }
                    catch(Exception $e) {
                        $chatMember = null;                       
                    }
                    if($chatMember && in_array($chatMember->status,['administrator','creator'])) {
                        $ugList[] = $ug;                        
                    }
                    else {
                        $ug->who_add = null;
                        $ug->save();
                    }
                }
                if(!$ugList) {
                    $res['text'] = "–ù–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –≥—Ä—É–ø–ø, –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–º";
                }
                else $res['inline_keyboard'] = $this->inlineKeyboard($ugList,1,"changegrpset&",false,'id','title');
            }

            return [$res];
        }
        if(strpos($command,'grpwidetarif&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $res['text'] = "<b>–ì—Ä—É–ø–ø–∞ $grp</b>
            \n<b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {$grp->tarif}";
            $btns = [];
            if($grp->tarif_id > 1) {
                $res['text'] .= "\n<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ".Functions::rusDate($grp->tarif_expired);
                $btns[] = [$this->inlBtn('–ü—Ä–æ–¥–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ',"grptarprolong&{$grp->id}")];
            }
            if($grp->tarif_id < 3) {
                $btns[] = [$this->inlBtn('–†–∞—Å—à–∏—Ä–∏—Ç—å —Ç–∞—Ä–∏—Ñ',"grptarwide&{$grp->id}")];
            }
            $res['inline_keyboard']['inline_keyboard'] = $btns;
            return [$res];
        }
        if(strpos($command,'grptarwide&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $res['text'] = "<b>–ì—Ä—É–ø–ø–∞ $grp</b>
            \n<b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {$grp->tarif}
            \n<b>–°—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:</b>";
            $tarifs = GroupTarif::where('id','>',1)->get();            
            foreach($tarifs as $ctarif) {
                $res['text'].="\n üü¢ {$ctarif} - {$ctarif->price}ü™ô";
            }
            $res['text'].="\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏";
            $ltarifs = GroupTarif::where('id','>',$grp->tarif_id)->get();
            $res['inline_keyboard'] = $this->inlineKeyboard($ltarifs,1,"newgrptarif&{$grp->id}&",false,'id','name');
            return [$res];
        }
        if(strpos($command,'newgrptarif&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $tarif = GroupTarif::where('id',$cmd_arr[2])->first();
            $user = BotUser::where('id',$chat_id)->first();
            $res = [];
            if($user->decBalance(Currency::R_WINDCOIN,$tarif->price)) {
                $grp->tarif_id = $tarif->id;
                $grp->reward = $tarif->reward;
                $grp->save();
                $res['text'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ <b>$tarif</b>";
            }
            else {
                $neHvataet = $tarif->price - $user->getBalance(Currency::R_WINDCOIN);
                $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $neHvataet ü™ô –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞.
                \n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞";
                $res['inline_keyboard'] = $this->offerKeyboard(1,null,$command);
            }
            return [$res];
        }
        if(strpos($command,'grptarprolong&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $res['text'] = "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ <b>{$grp->tarif}</b> –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{$grp}</b> –Ω–∞ 1 –º–µ—Å—è—Ü
            \n–°—Ç–æ–∏–º–æ—Å—Ç—å: {$grp->tarif->price}ü™ô";
            $res['inline_keyboard']['inline_keyboard'] = [[$this->inlBtn("–ü—Ä–æ–¥–ª–∏—Ç—å","grptarprolnaccept&{$grp->id}")]];
            return [$res];
        }
        if(strpos($command,'grptarprolnaccept&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $user = BotUser::where('id',$chat_id)->first();
            $res = [];
            if($user->decBalance(Currency::R_WINDCOIN,$grp->tarif->price)) {
                $time = strtotime("+1 month",strtotime($grp->tarif_expired));
                $grp->tarif_expired = date('Y-m-d',$time);
                $grp->save();
                $res['text'] = "–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ ".Functions::rusDate($grp->tarif_expired);
            }
            else {
                $neHvataet = $grp->tarif->price - $user->getBalance(Currency::R_WINDCOIN);
                $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $neHvataet ü™ô –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞.
                \n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞";
                $res['inline_keyboard'] = $this->offerKeyboard(1,null,$command);
            }
            return [$res];
        }

        if(strpos($command,'changegrpset&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $res['text'] = "–í—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –≥—Ä—É–ø–ø—É <b>{$grp->title}</b>\n–¢–∞—Ä–∏—Ñ –≥—Ä—É–ø–ø—ã: <b>{$grp->tarif}</b>
            \n–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å?";
            $setObject = Setting::groupSettings($grp->id);
            $res['inline_keyboard'] = $this->inlineKeyboard($setObject['modifSets'],1,"changegr1st&{$grp->id}&",false,'set_key','title_value');
            if($grp->tarif_id < 3) {
                array_unshift($res['inline_keyboard']['inline_keyboard'],[['text'=>'–†–∞—Å—à–∏—Ä–∏—Ç—å —Ç–∞—Ä–∏—Ñ','callback_data'=>"grpwidetarif&".$grp->id]]);
            }

            Log::info('Command changegrpset&', ['command' => $command]);

            return [$res];
        }
        if(strpos($command,'changegr1st&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $setKey = $cmd_arr[2];
            $bstatuses = ['‚ùå','‚úÖ'];
            switch($setKey) {
                case 'roles':
                    $res = $this->settingModelSwitchMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π",$grp->id,'roles',GameRole::class,
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",'changesetr1role');
                    break;
                case 'bafs':
                    $res = $this->settingModelSwitchMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞—Ñ–æ–≤",$grp->id,'bafs',Baf::class,
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",'changesetr1bafs');
                    break;
                default:
                    $settingX = Setting::groupSetting($grp->id,$setKey);
                    $setting = $settingX['group'] ? $settingX['group'] : $settingX['base'];
                    $res['text'] = "–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ <b>{$setting->title}</b>
                    \n<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>".$setting->set_value;
                    if(empty($setting->variants)) {
                        $res['text'] .= "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ";
                        $this->addCmd("changegr1stsend&{$grp->id}&{$cmd_arr[2]}&",$chat_id);
                    }
                    else {
                        $res['text'] .= "\n\n –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ";
                        if(strpos($setting->variants,'{')!==false) {
                            $variants = json_decode($setting->variants,true);
                            $res['inline_keyboard'] = $this->inlineKeyboard($variants,1,"changegr1stsend&{$grp->id}&{$cmd_arr[2]}&");
                        }
                        else {
                            $variants = explode(",",$setting->variants);
                            $avariants = [];
                            foreach($variants as $v) $avariants[$v] = $v;
                            $res['inline_keyboard'] = $this->inlineKeyboard($avariants,3,"changegr1stsend&{$grp->id}&{$cmd_arr[2]}&");
                        }
                    }
            }
            return [$res];
        }
        if(strpos($command,'changegr1stsend&')!==false) {
            $cmd_arr = explode('&',$command);
            $grp = BotGroup::where('id',$cmd_arr[1])->first();
            $setKey = $cmd_arr[2];
            $setVal = $cmd_arr[3];
            $changeSet = Setting::changeGroupSettingValue($grp->id,$setKey,$setVal);
            $res['text'] = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {$changeSet->title}
            \n<b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {$changeSet->set_value}";
            /*
            if($setKey === 'mediafiles') {
                $allow =  ($changeSet->set_value === 'yes') ? true : false;
                try {
                    $this->getApi()->setChatPermissions([
                        'chat_id'=>$grp->id,
                        'permissions'=>$this->mediaChatPermisions($allow)
                    ]);
                }
                catch(Exception $e) {
                    Log::error("mediafiles: ".$e->getMessage());
                }
            }
            */

            if($grp)
                $res['inline_keyboard']['inline_keyboard'][] = [['text' => '<< –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'callback_data'=>'changegrpset&'.$grp->id]];

            return [$res];
        }
        if(strpos($command,'changesetr1role&')!==false) {
            $this->editSettingSwitchBFRLMessage($command,$chat_id,$callback_id,'roles',"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π",
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",'changesetr1role',GameRole::class);
            return [];
        }
        if(strpos($command,'changesetr1bafs&')!==false) {
            $this->editSettingSwitchBFRLMessage($command,$chat_id,$callback_id,'bafs',"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞—Ñ–æ–≤",
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",'changesetr1bafs',Baf::class);
            return [];
        }
        if(strpos($command,'prodanyactivate&')!==false) {
            $cmd_arr = explode('&',$command);
            $uprod = UserProduct::where('id',$cmd_arr[1])->first();
            if($uprod && !$uprod->was_used) {
                $class = "\\App\\Modules\\Game\\Products\\".$uprod->product->class;
                $unwarn = new $class($uprod);
                $res = $unwarn->activate(['group_id'=>$cmd_arr[2]]);
            }
            else {
                $res['text'] = ''.$uprod->product." —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–Ω–Ω–µ–µ";
            }
            return [$res];
        }
        if(strpos($command,'addwarnselgrp&')!==false) {
            $cmd_arr = explode('&',$command);
            $res['text'] = "–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏";
            $this->addCmd("addwarninputlist&".$cmd_arr[1]."&",$chat_id);
            return [$res];
        }
        if(strpos($command,'addwarninputlist&')!==false) {
            $cmd_arr = explode('&',$command);
            $group_id = $cmd_arr[1];
            $listwords = explode("\n",$cmd_arr[2]);
            foreach($listwords as $word) {
                WarningWord::firstOrCreate(['word'=>trim($word),'group_id'=>$group_id]);
            }
            $res['text'] = "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω";
            return [$res];
        }
        if(strpos($command,'activateuprod&')!==false) {
            $cmd_arr = explode('&',$command);
            $uproduct = UserProduct::where('id',$cmd_arr[1])->first();
            if($uproduct) {
                $class = "\\App\\Modules\\Game\\Products\\".$uproduct->product->class;
                $prodManager = new $class($uproduct);
                $mess = $prodManager->message();
                if($mess) {
                    if(isset($mess['innercmd'])) {
                        $this->addCmd($mess['innercmd'].$cmd_arr[1]."&",$chat_id);
                    }
                    return [$mess];
                }
                else {
                    $prodManager->activate();
                    $res['text'] = ''.$uproduct->product." —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
                    return [$res];
                }
            }
        }
        if(strpos($command,'inputprefix&')!==false) {
            $cmd_arr = explode('&',$command);
            $uproduct = UserProduct::where('id',$cmd_arr[1])->first();
            //–≤ —Å–∫–æ–ª—å–∫–∏ –≥—Ä—É–ø–ø–∞—Ö —Å–æ—Å—Ç–æ–∏—à—å
            $chmbs = ChatMember::with('group')->where('member_id',$chat_id)->get()->all();
            if(count($chmbs) == 0) {
                $res['text'] = "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–æ–≤–æ–π –≥—Ä—É–ø–ø–µ. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞";
            }
            /*
            else if(count($chmbs) == 1) {
                $params['prefix'] = $cmd_arr[2];
                $params['group_id'] = $chmbs[0]->group_id;
                $class = "\\App\\Modules\\Game\\Products\\".$uproduct->product->class;
                $prodManager = new $class($uproduct);
                $prodManager->activate($params);
                $res['text'] = "–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å {$cmd_arr[2]} –¥–ª—è –≥—Ä—É–ø–ø—ã ".$chmbs[0]->group;
            }
            */
            else {
                $res['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å";
                $res['inline_keyboard'] = $this->inlineKeyboard($chmbs,1,"selprefixgroup&".$cmd_arr[1]."&".$cmd_arr[2]."&",false,'group_id','group');
            }
            return [$res];
        }
        if(strpos($command,'selprefixgroup&')!==false) {
            $cmd_arr = explode('&',$command);
            $uproduct = UserProduct::where('id',$cmd_arr[1])->first();
            $params['prefix'] = $cmd_arr[2];
            $params['group_id'] = $cmd_arr[3];
            $class = "\\App\\Modules\\Game\\Products\\".$uproduct->product->class;
            $prodManager = new $class($uproduct);
            $prodManager->activate($params);
            $group = BotGroup::where('id',$params['group_id'])->first();
            $res['text'] = "–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å {$cmd_arr[2]} –¥–ª—è –≥—Ä—É–ø–ø—ã ".$group;
            return [$res];
        }
        if(strpos($command,'changeubaf&')!==false) {
            $cmd_arr = explode('&',$command);
            $ubaf = UserBaf::where('id',$cmd_arr[1])->first();
            if($ubaf) {
                $ubaf->is_activate = $ubaf->is_activate ? 0 : 1;
                $ubaf->save();
            }
            $grpmess['chat_id'] = $chat_id;
            $grpmess['message_id'] = $callback_id;
            $grpmess['parse_mode'] = 'HTML';
            $profmess = $this->profileMessage($chat_id);
            $grpmess['text'] = $profmess['text'];
            $grpmess['reply_markup'] = json_encode($profmess['inline_keyboard']);
            $this->getApi()->editMessageText($grpmess);
            return [];
        }
        if(strpos($command,'exchangecb_')!==false) {
            $cmd_arr = explode('_',$command);
            $coinsum = abs($cmd_arr[1]);
            $exchanger = [
                '1'=>100,
                '3'=>320,
                '5'=>550,
                '8'=>900,
                '10'=>1250,
                '20'=>2600,
                '50'=>7000
            ];
            $user = BotUser::where('id',$chat_id)->first();
            if(!isset($exchanger[$coinsum])) {
                $res['text'] = "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã";
            }
            else if($user) {
                if($user->decBalance(Currency::R_WINDCOIN,$coinsum,false)) {
                    $user->addBalance(Currency::R_WINDBUCKS,$exchanger[$coinsum],true);
                    $res['text'] = "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ $coinsum ü™ô –Ω–∞ {$exchanger[$coinsum]} üí∂
                    \n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {$exchanger[$coinsum]} üí∂";
                }
                else {
                    $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.";
                }
            }
            else {
                $res['text'] = "–û—à–∏–±–∫–∞. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }
            return [$res];
        }
        if($command === 'vigruzka') {
            $res['text'] = json_encode(Game::vigruzka(),JSON_UNESCAPED_UNICODE);
            return [$res];
        }
        if($command === 'buyothers') {
            $seasonCur = Currency::seasonCurOfMonth();
            $curSybmols = Currency::allCurrencies();
            $products = Product::whereIn('cur_code',[$seasonCur, Currency::R_WINDBUCKS,Currency::R_WINDCOIN])->get();
            $textarr = ["<b>–¢–æ–≤–∞—Ä—ã</b>"];
            foreach($products as $product) {
                $textarr[] = "<b>{$product->name} - <i>{$product->price}".$curSybmols[$product->cur_code]."</i></b>\n{$product->description}";
            }
            $res['text'] = implode("\n\n",$textarr);
            $res['inline_keyboard'] = $this->inlineKeyboard($products, 2,"buyselprod&",false,'id','name');
            $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'<< –ù–∞–∑–∞–¥','callback_data'=>'üõí –ú–∞–≥–∞–∑–∏–Ω']];
            return [$res];
        }
        if(strpos($command,'buyselprod&')!==false) {
            $cmd_arr = explode('&',$command);
            $curNames = Currency::allCurrencies();
            //–ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
            $product = Product::where('id',$cmd_arr[1])->first();
            $user = BotUser::where('id',$chat_id)->first();
            if($product && $user) {
                if($user->decBalance($product->cur_code, $product->price)) { //—É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
                    UserProduct::create(['user_id'=>$chat_id,'product_id'=>$product->id]);
                    $res['text'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{$product->name}</b>. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>üëÅ‚Äçüó® –ú–æ—ë –∏–Ω—Ñ–æ</b>.";
                }
                else {
                    $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å ".$curNames[$product->cur_code]." –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.";
                    $offer = Offer::where('parent_id', 0)->where('product',$product->cur_code)->first();
                    if($offer) {
                        $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'callback_data'=>'btnseloffer&'.$offer->id."&buyothers"]];
                    }
                }
                $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'<< –ù–∞–∑–∞–¥', 'callback_data'=>'buyothers']];
                return [$res];
            }
            $res['text'] = "–û—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å";
            return [$res];
        }
        if($command == 'buyroles') {
            $buyRoles = BuyRole::with('role')->orderBy('id')->get();
            $res['text'] = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å. –û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ";
            $res['inline_keyboard'] = $this->inlineKeyboard($buyRoles,2,"buyselrole&",false,'id','role_with_price');
            $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'<< –ù–∞–∑–∞–¥','callback_data'=>'üõí –ú–∞–≥–∞–∑–∏–Ω']];
            return [$res];
        }
        if(strpos($command,'buyselrole&')!==false) {
            $cmd_arr = explode('&',$command);
            $buyRole = BuyRole::where('id',$cmd_arr[1])->first();
            $user = BotUser::where('id',$chat_id)->first();
            $curNames = Currency::allCurrencies();
            if($buyRole && $user) {
                if($user->decBalance($buyRole->cur_code, $buyRole->price)) { //—É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
                    UserBuyRole::create(['user_id'=>$chat_id,'role_id'=>$buyRole->role_id]);
                    $res['text'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{$buyRole->role}</b>";
                }
                else {
                    $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {$curNames[$buyRole->cur_code]} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏.";
                    $offer = Offer::where('parent_id', 0)->where('product',$buyRole->cur_code)->first();
                    if($offer) {
                        $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å','callback_data'=>'btnseloffer&'.$offer->id."&buyroles"]];
                    }
                }
                $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'<< –ù–∞–∑–∞–¥','callback_data'=>'buyroles']];
                return [$res];
            }
            $res['text'] = "–û—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å";
            return [$res];
        }
        if($command == 'buybafs') {
            $bafs = Baf::all();
            $textarr = ["<b>–ë–∞—Ñ—Ñ—ã</b>"];
            $curSybmols = Currency::allCurrencies();
            foreach($bafs as $baf) {
                $textarr[] = "<b>{$baf->name} - <i>{$baf->price}".$curSybmols[$baf->cur_code]."</i></b>\n{$baf->description}";
            }
            $res['text'] = implode("\n\n",$textarr);
            $res['inline_keyboard'] = $this->inlineKeyboard($bafs, 2,"buyselbaf&",false,'id','name');
            $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'<< –ù–∞–∑–∞–¥','callback_data'=>'üõí –ú–∞–≥–∞–∑–∏–Ω']];
            return [$res];
        }
        if(strpos($command,'fakepas&')!==false) {
            $cmd_arr = explode('&',$command);
            $prmId = $cmd_arr[1];
            $roleId = $cmd_arr[2];
            $role = GameRole::where('id',$roleId)->first();
            $gmParam = GamerParam::where('id',$prmId)->first();
            $gmParam->param_value = $role->name;
            $gmParam->save();
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            if($gamer) GamerParam::saveParam($gamer, 'puaro_check_result',"–ö–æ–º–∏—Å—Å–∞—Ä –ü—É–∞—Ä–æ –≤–∑—è–ª —É –≤–∞—Å –ø–∞—Å–ø–æ—Ä—Ç. –í—ã –≤—ã–±—Ä–∞–ª–∏ {$role->name}. –ö–∞–∂–µ—Ç—Å—è, –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª...");
            return [];
        }
        if(strpos($command,'buyselbaf&')!==false) {
            $cmd_arr = explode('&',$command);
            //–ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –±–∞—Ñ–∞
            $baf = Baf::where('id',$cmd_arr[1])->first();
            $user = BotUser::where('id',$chat_id)->first();
            if($baf && $user) {
                if($user->decBalance($baf->cur_code, $baf->price)) { //—É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
                    $ubaf = UserBaf::where(['user_id'=>$chat_id,'baf_id'=>$baf->id])->first();
                    if($ubaf) {
                        $ubaf->amount = $ubaf->amount + 1;
                        $ubaf->save();
                    }
                    else {
                        UserBaf::create(['user_id'=>$chat_id,'baf_id'=>$baf->id, 'amount'=>1]);
                    }
                    $res['text'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{$baf->name}</b>";
                }
                else {
                    $curNames = Currency::allCurrencies();
                    $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {$curNames[$baf->cur_code]} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞—Ñ—Ñ–∞.";
                    $offer = Offer::where('parent_id', 0)->where('product',$baf->cur_code)->first();
                    if($offer) {
                        $res['inline_keyboard']['inline_keyboard'][] = [['text'=>'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å','callback_data'=>'btnseloffer&'.$offer->id."&buybafs"]];
                    }
                }
                $res['inline_keyboard']['inline_keyboard'][]=[['text'=>"<< –ù–∞–∑–∞–¥",'callback_data'=>'buybafs']];
                return [$res];
            }
            $res['text'] = "–û—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å";
            return [$res];
        }
        if($command == "viewroles" && $chat_id == "376753094") {
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            if($gamer) {
                $gamers = GameUser::where('game_id',$gamer->game_id)->where('is_active',1)->get();
                $info = [];
                foreach($gamers as $tgamer){
                    $info[] = ''.$tgamer->user." -  ".$tgamer->role;
                }
                $res['text'] = implode("\n",$info);
            }
            else $res['text'] = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã";
            return [$res];
        }
        if($command === 'nightactionempty') {
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            if($gamer) {
                GamerParam::saveParam($gamer,'nightactionempty',1);
                $res['text'] = "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥";
                return [$res];
            }
            return [];
        }
        if(strpos($command,'lastword_')!==false) {
            $cmd_arr = explode('_',$command);
            $gamer = GameUser::where('id',$cmd_arr[1])->first();
            $die_word_long = Setting::groupSettingValue($gamer->game->group_id,'die_word_long');
            $lastwordTime = $this->cmdTime ? strtotime($this->cmdTime) : 0;

            if($gamer->game->status == 1 && ($lastwordTime+$die_word_long) >= time()) {  //$gamer->kill_night_number == $gamer->game->current_night &&
                $text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ ".Game::userUrlName($gamer->user)." –¥–æ–Ω–µ—Å–ª–æ—Å—å —ç—Ö–æ–º —Å—Ä–µ–¥–∏ —Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ—É–ª–∫–æ–≤:\n<i>".$cmd_arr[2]."</i>";
                //$text = "–ö—Ç–æ-—Ç–æ —Å–ª—ã—à–∞–ª, –∫–∞–∫ ".Game::userUrlName($gamer->user)." –ø–µ—Ä–µ–¥ —Å–º–µ—Ä—Ç—å—é –∫—Ä–∏—á–∞–ª: \n".$cmd_arr[2];
                $this->sendAnswer([['text'=>$text]],$gamer->game->group_id);
                $res['text'] = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ";
                return [$res];
            }
        }
        if(strpos($command,'getrole=')!==false) {
            $cmd_arr = explode('=',$command);
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            if($gamer) {
                $gm2 = GameUser::where('game_id',$gamer->game_id)->where('role_id',$cmd_arr[1])->first();
                if($gm2) {
                    $gm2->role_id = $gamer->role_id;
                    $gm2->save();
                }
                $gamer->role_id = $cmd_arr[1];
                $gamer->save();
            }
            $res['text'] = 'ok';
            return [$res];
        }
        if(strpos($command,'/start')!==false) {
            $cmd_arr = explode(' ',$command);
            if(isset($cmd_arr[1]) && $cmd_arr[1] === 'roulette') {
                $season = Currency::seasonCurOfMonth();
                $res['text'] = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è 1".Currency::allCurrencies()[$season];
                $res['text'] .="\n\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /roulette";
                $res['keyboard'] = $this->mainMenu;
                return [$res];
            }
            if(isset($cmd_arr[1]) && strpos($cmd_arr[1],'teamgm_')!==false) {
                $gameParams = explode('_',$cmd_arr[1]);
                if(isset($gameParams[1]) && is_numeric($gameParams[1])) {
                    $isGamer = GameUser::where(['game_id'=>$gameParams[1],'user_id'=>$chat_id])->first();
                    $game = GameModel::where('id',$gameParams[1])->first();
                    if(!$isGamer && $game) {
                        if($game->status > 0) {
                            $res['text'] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç—É –∏–≥—Ä—É —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
                            return [$res];
                        }
                        //–æ–±–Ω–æ–≤–∏–º –∏–º–µ–Ω–∞
                        $user = BotUser::where('id',$chat_id)->first();
                        $updates = $hookUpdate;
                        $params = [
                            'nick_name'=>empty($updates["message"]["from"]["username"]) ? null : $updates["message"]["from"]["username"],
                            'first_name'=>$updates['message']['from']['first_name'] ?? null,
                            'last_name'=>$updates['message']['from']['last_name']  ?? null,
                        ];
                        $user->fill($params);
                        $user->save();
                        GameUser::connectNewGame(['game_id'=>$gameParams[1],'user_id'=>$chat_id,'role_id'=>0,'team'=>$gameParams[2]]);
                        //GameUser::create(['game_id'=>$gameParams[1],'user_id'=>$chat_id,'role_id'=>0,'team'=>$gameParams[2]]);
                    }
                    if(!$isGamer && $game && $game->options) {
                        $gamers = Game::editRegistrationMessageTeam($game);
                        $gmCount = $gamers->count();
                        $res['text'] = "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ <a href='".$game->group->getUrl()."'>{$game->group->title}</a>
                        \n–ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã";

                        $gamersCount = Setting::groupSettingValue($game->group_id,'gamers_count');
                        if($gamersCount <= $gmCount) {  //–Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ -- –∑–∞–ø—É—Å–∫–∞–µ–º
                            $options = json_decode($game->options,true);  // {"message_id":"2909"}
                            if(isset($options['task'])) {
                                $task = TaskModel::where('id',$options['task'])->first();
                                if($task) {
                                    $task->is_active = 0;
                                    $task->save();
                                }
                            }
                            $options = ['class'=>Game::class, 'method'=>'autostart','param'=>$game->id];
                            $task = TaskModel::create(['game_id'=>$game->id,'name'=>'–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç. –ò–≥—Ä–∞ '.$game->id,'options'=>json_encode($options),'delay'=>2]);
                        }
                    }
                    else {
                        $res['text'] = "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ <a href='".$game->group->getUrl()."'>{$game->group->title}</a>
                        \n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã";
                    }
                    $res['keyboard'] = $this->mainMenu;
                    return [$res];
                }
            }

            //----------------------------------------------------------------------------
            if(isset($cmd_arr[1]) && strpos($cmd_arr[1],'game_')!==false) {
                $gameParams = explode('_',$cmd_arr[1]);
                if(isset($gameParams[1]) && is_numeric($gameParams[1])) {
                    $isGamer = GameUser::where(['game_id'=>$gameParams[1],'user_id'=>$chat_id])->first();
                    $game = GameModel::where('id',$gameParams[1])->first();
                    if(!$isGamer && $game) {
                        if($game->status > 0) {
                            $res['text'] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç—É –∏–≥—Ä—É —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
                            return [$res];
                        }
                        //–æ–±–Ω–æ–≤–∏–º –∏–º–µ–Ω–∞
                        $user = BotUser::where('id',$chat_id)->first();
                        $updates = $hookUpdate;
                        $params = [
                            'nick_name'=>empty($updates["message"]["from"]["username"]) ? null : $updates["message"]["from"]["username"],
                            'first_name'=>$updates['message']['from']['first_name'] ?? null,
                            'last_name'=>$updates['message']['from']['last_name']  ?? null,
                        ];
                        $user->fill($params);
                        $user->save();
                        
                        GameUser::connectNewGame(['game_id'=>$gameParams[1],'user_id'=>$chat_id,'role_id'=>0]); //create
                    }
                    if(!$isGamer && $game && $game->options) {
                        $groupUrl = $game->group->getUrl();
                        if(!$groupUrl) {
                            $messGroup['text'] = "–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–± –≤–µ—Å—Ç–∏ –∏–≥—Ä—É –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É. \n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
                            \n–í—ã–¥–∞–π—Ç–µ –º–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∞–≤–∞ –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é";
                            $this->sendAnswer([$messGroup],$game->group_id);
                            $res['text'] = "–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã";
                            $game->status = 2;
                            $game->save();

                            $options = json_decode($game->options,true);  // {"message_id":"2909"}
                            try {
                                $this->getApi()->deleteMessage(['chat_id'=>$game->group_id,'message_id'=>$options['message_id']]);
                            }
                            catch(Exception $e) {  }
                            return [$res];
                        }
                        $gamers = Game::editRegistrationMessageStandart($game);
                        $gmCount = $gamers->count();
                        $res['text'] = "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ <a href='".$groupUrl."'>{$game->group->title}</a>
                        \n–ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã";

                        $gamersCount = Setting::groupSettingValue($game->group_id,'gamers_count');
                        if($gamersCount <= $gmCount) {  //–Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ -- –∑–∞–ø—É—Å–∫–∞–µ–º
                            $options = json_decode($game->options,true);  // {"message_id":"2909"}
                            if(isset($options['task'])) {
                                $task = TaskModel::where('id',$options['task'])->first();
                                if($task) {
                                    $task->is_active = 0;
                                    $task->save();
                                }
                            }
                            $options = ['class'=>Game::class, 'method'=>'autostart','param'=>$game->id];
                            $task = TaskModel::create(['game_id'=>$game->id,'name'=>'–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç. –ò–≥—Ä–∞ '.$game->id,'options'=>json_encode($options),'delay'=>2]);
                        }
                    }
                    else {
                        $res['text'] = "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ <a href='".$game->group->getUrl()."'>{$game->group->title}</a>
                        \n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã";
                    }
                    $res['keyboard'] = $this->mainMenu;
                    return [$res];
                }
            }
            //-------------------------------------------------------------
            $res['text'] = "–ü—Ä–∏–≤–µ—Ç. –¢—ã –≤ –∏–≥—Ä–æ–≤–æ–º –±–æ—Ç–µ –ú–∞—Ñ–∏—è";
            $res['keyboard'] = $this->mainMenu;
            return [$res];
        }
        if($command === "/view_payments" && in_array($chat_id,['522927544','376753094'])) {
            $start = date('Y-m-d',strtotime("-7 day"));
            $res['text'] = "<b>–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é</b>";
            $payments = Payment::with('offer')->with('user')->where('status',1)->where('created_at','>',$start)->orderBy('created_at')->get();
            $idx = 1;
            foreach($payments as $paym) {
                $res['text'] .= "\n\n".($idx++).". <b>{$paym->offer}</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ".Game::userUrlName($paym->user).
                "\n–î–∞—Ç–∞: {$paym->created_at} \n–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {$paym->amount} {$paym->currency}";
                if($paym->currency =='USD') {
                    $res['text'] .="\n–ú–æ–π –¥–æ—Ö–æ–¥: {$paym->offer->price} USD";
                }
            }
            return [$res];
        }
        if($command === "/addmybalance" && in_array($chat_id,['522927544','376753094'])) {
            $botUser = BotUser::where('id',$chat_id)->first();
            $allcurs = Currency::allCurrencies();
            foreach($allcurs as $k=>$v) {
                $botUser->addBalance($k,1000,false);
            }
            $botUser->save();
            $res['text'] = "–í—Å–µ –≤–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 1000";
            return [$res];
        }
        if(strpos($command,'onoopenrole_')!==false) {
            $cmd_arr = explode('_',$command);
            $victim = GameUser::where('id',$cmd_arr[2])->first();

            $tm = $cmd_arr[1];
            $tek_time = time();
            if($tek_time - $tm > 90) {
                $res['text'] = "–¢—ã –Ω–µ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä";
            }
            else {
                $group_mes['text'] = "üéà–û–Ω–æ –Ω–∞–ø–µ–ª —Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤: ".Game::userUrlName($victim->user).' - '.$victim->role;
                $this->sendAnswer([$group_mes], $victim->game->group_id);
                $res['text'] = "–¢—ã —Ä–∞—Å–∫—Ä—ã–ª —Ä–æ–ª—å: ".Game::userUrlName($victim->user).' - '.$victim->role;
            }
            return [$res];
        }
        if(strpos($command,'bombaget_')!==false) {
            $cmd_arr = explode('_',$command);
            $tm = $cmd_arr[1];
            $tek_time = time();
            $victim = GameUser::where('id',$cmd_arr[2])->first();
            $gamer = GameUser::where('user_id',$chat_id)->where('game_id',$victim->game_id)->first();
            $bomba_time = Setting::groupSettingValue($gamer->game->group_id,'bomba_long');
            if($victim->game->status != 1) {
                $res['text'] = "–ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
            }
            else if($tek_time - $tm <= $bomba_time) {
                $res['text'] = "–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å —Å–æ–±–æ–π ".Game::userUrlName($victim->user).' - '.$victim->role;
                $group_mes['text'] = "üí£–ë–æ–º–±–∞ –∑–∞–±—Ä–∞–ª–∞ –∫ —Å–µ–±–µ –≤ –º–∏—Ä –∏–Ω–æ–π ".Game::userUrlName($victim->user).' - '.$victim->role."\n".
                '"–ú—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ!", ‚Äì —Ç–æ–ª—å–∫–æ –∏ —Å–ª—ã—à–∞–ª–∏ –∂–∏—Ç–µ–ª–∏...';
                $winIfKillerRole = [16,17,18,20,21,22, 25, 28, 20, 30, 27];
                if(in_array($victim->role_id, $winIfKillerRole)) { //–≤—ã–∏–≥—Ä–∞–ª–∞, –µ—Å–ª–∏ –∑–∞–±—Ä–∞–ª–∞ —É–±–∏–≤–∞—é—â—É—é —Ä–æ–ª—å
                    $gamer->is_active = 2;
                }
                else if($victim->role_id == 10 && GamerFunctions::oderjimIsNeytral($gamer->game)) {
                    $gamer->is_active = 2;
                }
                else {
                    $gamer->is_active = 0;
                }
                $gamer->save();
                GamerFunctions::user_deactivate(['killer_id'=>$gamer->id, 'cmd_param'=>$victim->id],false);
                $this->sendAnswer([$group_mes], $gamer->game->group_id);
            }
            else {
                $res['text'] = "–¢–≤–æ–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –±—ã–ª–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å –æ–¥–∏–Ω–æ–∫–æ–π –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–∞–±–∏—Ä–∞—Ç—å –∫ —Å–µ–±–µ –≤ –º–∏—Ä –∏–Ω–æ–π...";
            }
            return [$res];
        }
        if(strpos($command,'voitprot_')!==false) {
            $cmd_arr = explode('_',$command);
            $voiting_id = $cmd_arr[1];
            $selgamer_id = $cmd_arr[2];
            $voiting = Voiting::where('id',$voiting_id)->first();
            if(!$voiting || !$voiting->isActive()) return [];
            $tGamer = GameUser::where('user_id', $chat_id)->where('game_id',$voiting->game_id)->where('is_active',1)->first();
            if(!$tGamer) return [];
            if($selgamer_id === 'empty') {
                $this->sendAnswer([['text'=>Game::userUrlName($tGamer->user)." —Ä–µ—à–∏–ª –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–µ—à–∞—Ç—å"]],$tGamer->game->group_id);
                $res['text'] = "–í—ã —Ä–µ—à–∏–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–µ—à–∞—Ç—å";
                return [$res];
            }
            Vote::firstOrCreate(['voiting_id'=>$voiting_id,'vote_user_id'=>$chat_id],['gamer_id'=>$selgamer_id,'vote_role_id'=>$tGamer->role_id]);
            $gamer = GameUser::where('id', $selgamer_id)->first();
            $res['text'] = "–í–∞—à –≤—ã–±–æ—Ä: ".$gamer->user;

            $user = BotUser::where('id',$chat_id)->first();
            $anonym_voiting = Setting::groupSettingValue($gamer->game->group_id,'anonym_voiting');
            if($anonym_voiting==='yes') {
                $this->sendAnswer([['text'=>"–ö—Ç–æ-—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞: ".Game::userUrlName($gamer->user)]],$gamer->game->group_id);
            }
            else {
                $this->sendAnswer([['text'=>Game::userUrlName($user ?? new BotUser(['id'=>$chat_id, 'first_name'=>'–ë–æ—Ç '.$chat_id]))." –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞) –∑–∞: ".Game::userUrlName($gamer->user)]],$gamer->game->group_id);
            }
            return [$res];
        }
        if($command === '/mybalance') {
            $gameCurrencies = Currency::allCurrencies();
            $botUser = BotUser::where('id',$chat_id)->first();
            if($botUser) {
                $res['text'] = "<b>–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:</b>\n";
                if($botUser->balances) {
                    $balances = json_decode($botUser->balances,true);
                }
                else {
                    $balances[Currency::R_WINDBUCKS] = 0;
                    $balances[Currency::R_WINDCOIN] = 0;
                    $botUser->balances = json_encode($balances);
                    $botUser->save();
                }
                foreach($balances as $k=>$v) {
                    $res['text'] .= "\n<b>".Currency::CURNAMES[$k].":</b> ".$v.' '.$gameCurrencies[$k];
                }
                return [$res];
            }
            return [];
        }
        if($this->clearCommand($command) === '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' || $this->clearCommand($command) === 'Achievements') {
            $res['text'] = "<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n";

            $results = UserAchievement::with('achievement')->where('user_id',$chat_id)->get();
            if($results->count()) {
                $textarr = [];
                $index = 1;
                foreach($results as $uachive) {
                    $textarr[] = $index.'. '.$uachive->achievement->name;
                }
                $res['text'] .= implode("\n",$textarr);
            }
            else {
                $res['text'] .= "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.";
            }
            return [$res];
        }
        if(strpos($command,'gunyes&')!==false) {
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            $fres = [];
            if($gamer) {
                $result = GamerFunctions::execBafMethod($gamer,'gunyes');
                if($result) {
                    $res['text'] = $result['text'];
                }
                else {
                    $res['text'] = "–ë–∞—Ñ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã";
                }
                $fres = [$res];
            }
            return $fres;

        }
        if(strpos($command,'gunno&')!==false) {
            return [];
        }

        if(strpos($command,'okoexecyes&')!==false) {
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();
            $fres = [];
            if($gamer) {
                $result = GamerFunctions::execBafMethod($gamer,'oko_exec');
                if($result) {
                    $res['text'] = $result['text'];
                }
                else {
                    $res['text'] = "–ë–∞—Ñ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã";
                }
                $fres = [$res];
            }
            return $fres;

        }
        //–∫–æ–º–∏—Å—Å–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–Ω–µ–º
        if(strpos($command, 'puaroucheck_')!==false || strpos($command, 'puaro_check')!==false) {
            $gamer = GameUser::where('user_id',$chat_id)->where('is_active',1)->first();

            if($gamer && $gamer->game && !$gamer->game->isNight()) {
                $res['text'] = "–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –Ω–æ—á—å—é, —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å....";

                return [$res];
            }
        }
        if(strpos($command,'okoexecno&')!==false) {
            return [];
        }


        return parent::prepareAnswer($command,$chat_id,$callback_id,$hookUpdate);
    }
    public function prepareGroupAnswer($command,$group_id,$from,$hookUpdate) {    
        if($from['is_bot']) return [];

        $cmd_arr = explode(' ',str_replace('/','',$command));
        // Log::info('PrepareGroupAnswer', [
        //     'cmd_arr'       => print_r($cmd_arr, true),
        //     'group_id'      => $group_id,
        //     'from'          => print_r($from, true),
        //     'hookUpdate'    => print_r($hookUpdate),
        //     'command'       => $command
        // ]);

        $res = [];

        $gameCurrencies = Currency::allCurrencies();
        if(in_array($cmd_arr[0],array_keys($gameCurrencies))) {
           if(!isset($hookUpdate['message']['reply_to_message'])) {
                $res['text'] = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /{$cmd_arr[0]} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É";
                return [$res];
           }
           if(!isset($cmd_arr[1]) || strpos($cmd_arr[1], '.') !== false || (int)$cmd_arr[1] <= 0) {
                $res['text'] = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–º–∞–Ω–¥–∞ —Ü–µ–ª–æ–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä /windbucks 10";
                return [$res];
           }
           $cmd_arr[1] = abs(round($cmd_arr[1]));
           $this->userStart($hookUpdate['message']['reply_to_message']['from']['id'],['message'=>$hookUpdate['message']['reply_to_message']]);
           $res = [];
           if($hookUpdate['message']['reply_to_message']['from']['is_bot']) {
                $res['text'] = "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª—é—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞";
           }
           else if($from['id'] == $hookUpdate['message']['reply_to_message']['from']['id']) {
                $res['text'] = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /{$cmd_arr[0]} –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É.\n<b>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–ª—é—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>";
           }
           else if(Currency::sendCurrency($from['id'],$hookUpdate['message']['reply_to_message']['from']['id'],$cmd_arr[0],$cmd_arr[1],$group_id)) {
                $recp = $hookUpdate['message']['reply_to_message']['from'];
                $senderName = $from['first_name']." ".($from['last_name'] ?? '');
                $recpName = $recp['first_name']." ".($recp['last_name'] ?? '');
                $res['text'] = "<b>$senderName</b> –ø–æ–¥–∞—Ä–∏–ª <b>$recpName</b> <b>{$cmd_arr[1]}</b> {$gameCurrencies[$cmd_arr[0]]}";
           }
           else {
                $res['text'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é";
           }
           return [$res];
        }
        //if(strpos($command,'/leave')!==false) {
        if($command === '/leave' || $command === '/leave@'.config('app.bot_nick')) {
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            $isCanLeave = Setting::groupSettingValue($group_id, 'leave_game');
            //–∏—â–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—É—é –∏–≥—Ä—É
            $game = GameModel::where('group_id', $group_id)->where('status','<',2)->first();
            if(!$game) return [];
            if($isCanLeave !== 'yes' && $game->status == 1) return [];            
            $gamer = GameUser::where('user_id',$from['id'])->where('game_id',$game->id)->first();
            if(!$gamer || !$gamer->isActive()) return [];
            /* –æ—Ç–∫–ª—é—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ—á–∏
            if($game->times_of_day == GameModel::NIGHT) {
                $res['text'] = "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏";
                return [$res];
            } */
            $fres = [];
            if($gamer->role_id) {
                $res['text'] =  "<b>".Game::userUrlName($gamer->user)." ‚Äì {$gamer->role}</b> –ø—Ä—ã–≥–Ω—É–ª –≤ –æ–±—ä—è—Ç–∏—è —Å–º–µ—Ä—Ç–∏, –≤–µ—á–Ω–∞—è –µ–º—É –ø–∞–º—è—Ç—å...üïØ";
                $this->sendAnswer([$res],$group_id);
                $game = $gamer->game;
                $gamer->is_active = 0;
                $gamer->save();

                GamerFunctions::topGamersIfNeed($gamer->game);

                // if($gamer->role_id == 4) {
                //     GamerFunctions::ifSergantTop($gamer->game);
                // }

                // if($gamer->role_id == 15) {
                //     GamerFunctions::ifAssistentTop($gamer->game);
                // }

                if($gamer->role_id == 17) {
                    $g = GameUser::where(['game_id' => $game->id, 'role_id' => 25, 'is_active' => 1])->first();
                    if($g) {
                        $groupMess = ['text'=>"<b>ü§µüèª –ú–∞—Ñ–∏—è</b> –ø–æ–≤—ã—à–µ–Ω –¥–æ <b>ü§µüèª –î–æ–Ω–∞ –ö–æ—Ä–ª–µ–æ–Ω–µ</b>"];
                        $this->sendAnswer([$groupMess], $group_id);
                    }
                }

                return [];
            }
            else {
                //–ª–∏–≤ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∏ –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å
                $res['text'] ="–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —á–∞—Ç–µ <a href='".$gamer->game->group->getUrl()."'>".$gamer->game->group."</a>";
                $this->sendAnswer([$res],$gamer->user_id);
                //–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                $gamer->delete();
                Game::editRegistrationMessage($game);
                return [];
            }
            $fres[] = $res;
            $warn_for_leave = Setting::groupSettingValue($group_id, 'warn_for_leave');
            if($warn_for_leave === 'yes') {
                UserWarning::create(['user_id'=>$from['id'],'group_id'=>$group_id,'warning_id'=>5]);
                $warns = UserWarning::where(['user_id'=>$from['id'],'group_id'=>$group_id])->get();
                $warn = WarningType::where('id',5)->first();
                $res=[]; $res['text'] = Game::userUrlName($gamer->user). " –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥—ë–Ω (".$warns->count()."/6).\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {$warn->name}";
                $fres[] = $res;
            }
            $game = $gamer->game;
            $gamer->is_active = 0;
            $gamer->save();

            if($game->status && $gameOver = Game::isGameOver($game->id)) {
                Game::stopGame($game, $gameOver);
            }
            return $fres;
        }
        if($command === '/active') { //–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            $member = ChatMember::where(['group_id'=>$group_id, 'member_id'=>$from['id']])->first();
            if($member) {
                $res['text'] = Game::userUrlName($member->member)." —É–∂–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ";
            }
            else {
                $member = ChatMember::updateOrCreate(
                    [
                        'member_id'=>$from['id'],'group_id'=>$group_id
                    ],
                    [
                        'username'=> $from['username'] ?? '',
                        'first_name'=> $from['first_name'] ?? null,
                        'last_name'=> $from['last_name'] ?? null,
                        'is_bot'=>($from['is_bot'] ?? false) ? 1 : 0,
                        'is_premium'=>($from['is_premium'] ?? false) ? 1 : 0,
                    ]
                );
                $member->refresh();
                $res['text'] = Game::userUrlName($member->member)." –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã";
            }
            return [$res];
        }
        if($command === '/roles') {
            $res['text'] = 'üî• –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π üî•';
            $res['inline_keyboard']['inline_keyboard'] = [[['text'=>'–†–æ–ª–∏','url'=>"https://google.com"]]];
            return [$res];
        }
        if(strpos($command, "gallow_")!==false) { //–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –î–∞/–ù–µ—Ç
            $cmd_arr = explode('_',$command);
            $gamer = GameUser::where('id',$cmd_arr[1])->first();
            if(!$gamer) return [];
            $voiting = Voiting::where('id',$cmd_arr[2])->first();
            if(!$voiting || $voiting->is_active == 2) return [];
            //–ø—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º –≥–µ–π–º–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
          //  print_r(['user_id'=>$from['id'],'game_id'=>$gamer->game_id]);
            $voteUser = GameUser::where(['user_id'=>$from['id'],'game_id'=>$gamer->game_id])->first();
            if(!$voteUser || !$voteUser->isActive()) return []; //–Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
            if($voteUser->id == $cmd_arr[1]) return [];  //–Ω–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
            if(!GamerFunctions::isCanMove($voteUser)) return [];  //–Ω–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ–¥ –∫—Ä–∞—Å–æ—Ç–∫–æ–π

            YesnoVote::updateOrCreate(['voiting_id'=>$cmd_arr[2],'gamer_id'=>$cmd_arr[1],'vote_user_id'=>$from['id']],
                ['answer'=>$cmd_arr[3], 'vote_role_id'=>$voteUser->role_id]);
            $answers = Game::voting_yesno_results($cmd_arr[2]);
            $inlineKbd = Game::yes_no_buttons($cmd_arr[1],$cmd_arr[2],$answers['yes'],$answers['no']);
            $this->editInlineKeyboard($group_id,$hookUpdate['message_id'],$inlineKbd);
            return [];
           // return [['text'=>"$group_id , {$hookUpdate['message_id']} "]];
        }
        if(strpos($command,"/reggame=")!==false && in_array($group_id,['-1002046415969','-1002082482712','-1002594328742'])) {
            $cmd_arr = explode('=',$command);
            if(!is_numeric($cmd_arr[1])) {
                $res['text'] = "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ '=' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º";
                return [$res];
            }

            $reg_long_all = Setting::groupSettingValue($group_id,'reg_long_all');
            if($reg_long_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) return [];

            $game = GameModel::where('status',0)->where('group_id',$group_id)->first();
            if(!$game) return [];
            $count = GameUser::select('id')->where('game_id',$game->id)->get()->count();
            $genCnt = round($cmd_arr[1]) - $count;
            $sort_id = $count+1;
            while($genCnt > 0) {            
                GameUser::create(['game_id'=>$game->id,'user_id'=>random_int(123,9876),'role_id'=>0, 'sort_id'=>$sort_id++]);
                $genCnt--;
            }
           return [['text'=>'ok']];
        }
        if(strpos($command,'/teamgame@'.config('app.bot_nick')) !== false) {
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            $reg_game_all = Setting::groupSettingValue($group_id,'reg_game_all');
            if($reg_game_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) return [];

            $game = GameModel::where('group_id',$group_id)->whereIn('status',[0,1])->first();
            if($game && $game->status == 1) {
                return [];
            }

            if($game && $game->status == 0) {
                $options = json_decode($game->options, true);
                if(isset($options['message_id'])) $this->deleteMessage($group_id, $options['message_id']);
                $gamers = GameUser::with('user')->where('game_id',$game->id)->where('is_active',1)->get();
                $gmCount = $gamers->count();
                $txtUsers = [];
                foreach($gamers as $gamer) {
                    $prefTeam = isset(Game::COMMAND_COLORS[$gamer->team]) ? Game::COMMAND_COLORS[$gamer->team] . ' ' : '';
                    $txtUsers[] = $prefTeam . Game::userUrlName($gamer->user);                    
                }
                $res['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n".implode("\n",$txtUsers).
                "\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: $gmCount –∏–≥—Ä–æ–∫–æ–≤";
            }
            else {
                $res['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: 0 –∏–≥—Ä–æ–∫–æ–≤";
                $game = GameModel::firstOrCreate(['group_id'=>$group_id,'status'=>0],['is_team'=>1]);
                $options = ['class'=>Game::class, 'method'=>'autostart','param'=>$game->id];
                $delay = Setting::groupSettingValue($game->group_id,'registr_long');
                $task = TaskModel::create(['game_id'=>$game->id,'name'=>'–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç. –ò–≥—Ä–∞ '.$game->id,'options'=>json_encode($options),'delay'=>$delay]);
                $saver = new MessageResultSaver($game);
                $saver->saveOption('task',$task->id);
            }

            $res['saver'] = new MessageResultSaver($game);
            $auto_locking_message = Setting::groupSettingValue($group_id, 'auto_locking_message');
            if($auto_locking_message === 'yes') $res['pin'] = 1;
            foreach(Game::COMMAND_COLORS as $k=>$v) {
                $res['inline_keyboard']['inline_keyboard'][] = [['text'=>$v.' –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ','url'=>"https://t.me/".config('app.bot_nick')."?start=teamgm_".$game->id."_".$k]];
            }
            return [$res];
        }
        if(strpos($command,'/settings@'.config('app.bot_nick'))!==false) {
            $this->deleteMessage($group_id, $hookUpdate['message']['message_id']);
            try {
                $chatMember = $this->getApi()->getChatMember(['chat_id'=>$group_id,'user_id'=>$from['id']]);
            }
            catch(Exception $e) {
                $chatMember = null;
                $mess['text'] = "–Ø –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã";
                $this->sendAnswer([$mess], $group_id);
            }
            if($chatMember && in_array($chatMember->status,['administrator','creator'])) {
                //–æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ
                $botGroup = BotGroup::where('id',$group_id)->first();
                if($botGroup) {
                    $mess['text'] = "–í—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –≥—Ä—É–ø–ø—É <b>{$botGroup->title}</b>\n–¢–∞—Ä–∏—Ñ –≥—Ä—É–ø–ø—ã: <b>{$botGroup->tarif}</b>
                    \n–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å?";
                    $setObject = Setting::groupSettings($botGroup->id);
                    $mess['inline_keyboard'] = $this->inlineKeyboard($setObject['modifSets'],1,"changegr1st&{$botGroup->id}&",false,'set_key','title_value');
                    $this->sendAnswer([$mess],$from['id']);

                    if(!$botGroup->who_add) {
                        $botGroup->who_add = $from['id'];
                        $botGroup->save();
                    }
                }
            }
            return [];
        }
        if($command === '/updowner') {
            $result = $this->getApi()->getChatMember(['chat_id'=>$group_id,'user_id'=>$from['id']]);
            if($result->status == 'creator') {
                $group = BotGroup::where('id',$group_id)->first();
                if($group) {
                    $group->who_add = $from['id'];
                    $group->save();
                    $res['text'] = "–í–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω";
                    return [$res];
                }
            }
            return [];
        }
        if(strpos($command,"/kick") !==false ) {
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            if(!Game::hasRightToStart($from['id'],$group_id)) return [];
            $cmd_arr = explode(" ",$command);
            $game = GameModel::where('group_id',$group_id)->where('status','<',2)->first();
            if(!$game) {
                $res['text'] = "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
                return [$res];
            }
            if(!isset($cmd_arr[1]) || !is_numeric($cmd_arr[1])) {
                $res['text'] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –£–∫–∞–∂–∏—Ç–µ –ø–æ—Å–ª–µ /kick –Ω–æ–º–µ—Ä –∏–ª–∏ ID –∏–≥—Ä–æ–∫–∞
                \n<b>/kick 8</b> –∏–ª–∏ <b>/kick 123456789</b>";
                return [$res];
            }
            $glGamer = false;
            if($cmd_arr[1] < 100) { //–Ω–æ–º–µ—Ä 
                $gamers = GameUser::where('game_id',$game->id)->get()->all();
                if($cmd_arr[1] <= count($gamers)) {
                    $glGamer = $gamers[$cmd_arr[1]-1];
                }
                else {
                    $res['text'] = "–£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞";
                }                
            }
            else {  //ID
                $gamer = GameUser::where('user_id',$cmd_arr[1])->where('game_id',$game->id)->first();
                if($gamer) {
                    $glGamer = $gamer;
                }
                else {
                    $res['text'] = "–£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞";
                }                
            }

            if($glGamer) {
                $gamerName = Game::userUrlName($glGamer->user);
                if($glGamer->role) {
                    $res['text'] = "<b>".$gamerName." ‚Äì {$glGamer->role}</b> –ø—Ä—ã–≥–Ω—É–ª –≤ –æ–±—ä—è—Ç–∏—è —Å–º–µ—Ä—Ç–∏, –≤–µ—á–Ω–∞—è –µ–º—É –ø–∞–º—è—Ç—å...üïØ";
                    $glGamer->update(['is_active' => 0]);
                }

                
                if($game->status == 0) { //–æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    $glGamer->delete();
                    $res['text'] = "<b>".$gamerName."</b> –±—ã–ª —É–¥–∞–ª–µ–Ω!";  
                    Game::editRegistrationMessage($game);
                } elseif ($gameOver = Game::isGameOver($game->id)) {
                    Game::stopGame($game, $gameOver);
                    $res['text'] .= "\n\n‚ùå –ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...";
                }
                
            }
            return [$res];
        }
        if(strpos($command,'/game@'.config('app.bot_nick'))!==false) {   // && $group_id == '-1002082482712'
            //—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            //------------------------------
            $reg_game_all = Setting::groupSettingValue($group_id,'reg_game_all');
            if($reg_game_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) return [];

            $game = GameModel::where('group_id',$group_id)->whereIn('status',[0,1])->first();
            if($game && $game->status == 1) {
                return [];
            }
            if($game && $game->status == 0) {
                if(!$game->options) return [];
                $options = json_decode($game->options, true);                
                if(!$options || !isset($options['message_id'])) return [];
                $this->deleteMessage($group_id, $options['message_id']);
                $gamers = GameUser::with('user')->where('game_id',$game->id)->where('is_active',1)->get();
                $gmCount = $gamers->count();
                $txtUsers = [];
                foreach($gamers as $gamer) {
                    $txtUsers[] = Game::userUrlName($gamer->user);
                }
                $res['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n".implode("\n",$txtUsers).
                "\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: $gmCount –∏–≥—Ä–æ–∫–æ–≤";
            }
            else {
                $res['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: 0 –∏–≥—Ä–æ–∫–æ–≤";
                $game = GameModel::firstOrCreate(['group_id'=>$group_id,'status'=>0]);
                $options = ['class'=>Game::class, 'method'=>'autostart','param'=>$game->id];
                $delay = Setting::groupSettingValue($game->group_id,'registr_long');
                $task = TaskModel::create(['game_id'=>$game->id,'name'=>'–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç. –ò–≥—Ä–∞ '.$game->id,'options'=>json_encode($options),'delay'=>$delay]);
                $saver = new MessageResultSaver($game);
                $saver->saveOption('task',$task->id);
            }
            $res['saver'] = new MessageResultSaver($game);
            $auto_locking_message = Setting::groupSettingValue($group_id, 'auto_locking_message');
            if($auto_locking_message === 'yes') $res['pin'] = 1;
            $res['inline_keyboard']['inline_keyboard'] = [[['text'=>'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ','url'=>"https://t.me/".config('app.bot_nick')."?start=game_".$game->id]]];
            return [$res];
        }
        if(strpos($command,'/extend@'.config('app.bot_nick'))!==false) {
            //—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            //------------------------------
            $reg_long_all = Setting::groupSettingValue($group_id,'reg_long_all');
            if($reg_long_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) return [];

            $game = GameModel::where(['group_id'=>$group_id,'status'=>0])->first();
            if(!$game) {
                $res['text'] = "–ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω";
            }
            else {
                $options = json_decode($game->options,true);  // {"message_id":"2909"}
                if(isset($options['task'])) {
                    $task = TaskModel::where('id',$options['task'])->first();
                    if($task) {
                        $task->is_active = 0;
                        $task->save();
                    }
                }
                $res['text'] = "<b>–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω.</b>\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.";
            }
            return [$res];
        }
        if(strpos($command,'/start@'.config('app.bot_nick'))!==false) {
            //—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            //------------------------------
            $game_start_all = Setting::groupSettingValue($group_id,'game_start_all');
            if($game_start_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) return [];
            
            //–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            $game = GameModel::where(['group_id'=>$group_id,'status'=>0])->first();
            if($game) {
                $gamers = GameUser::where('game_id',$game->id)->where('is_active',1)->get();
                if($gamers->count() < 5) {
                    Game::stopGameRegistration($game);
                    $res['text'] = '<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</b>';
                    return [$res];
                }
                if($game->is_team) {
                    $team1 = GameUser::where('game_id',$game->id)->where('team',1)->where('is_active',1)->get();
                    $team2 = GameUser::where('game_id',$game->id)->where('team',2)->where('is_active',1)->get();
                    if($team1->count() !== $team2->count()) {
                        Game::stopGameRegistration($game);
                        $res['text'] = '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º...</b>';
                        return [$res];
                    }
                }
            }
            //-----------------------------            
            if(!$game) {
                $res['text'] = "–ù–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω";
            }
            else {
                $options = json_decode($game->options,true);  // {"message_id":"2909"}
                try {
                    $this->getApi()->deleteMessage(['chat_id'=>$group_id,'message_id'=>$options['message_id']]);
                }
                catch(Exception $e) {

                }
                if(isset($options['task'])) {
                    $task = TaskModel::where('id',$options['task'])->first();
                    if($task) {
                        $task->is_active = 0;
                        $task->save();
                    }
                }
                $game->options = null;
                $game->status = 1;
                $game->save();
                $res['text'] = '<b>–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ–∏ —Ä–æ–ª–∏...</b>';
                if($game->group_id == '-1002082482712') $res['text'] = "<b>–ò–≥—Ä–∞ #{$game->id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ–∏ —Ä–æ–ª–∏...</b>"; //–ú–∞—Ñ–∏—è —Ç–µ—Å—Ç
                $options = ['class'=>Game::class, 'method'=>'assignRolesToGamers','param'=>$game->id];
                TaskModel::create(['game_id'=>$game->id,'name'=>'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π. –ò–≥—Ä–∞ '.$game->id,'options'=>json_encode($options)]);
            }

            return [$res];
        }
        if($command === '/pause'  && Game::hasRightToStart($from['id'],$group_id)) {
            //—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            //------------------------------
            $game = GameModel::where(['status'=>1,'group_id'=>$group_id])->first();
            if($game) {
                $game->status = 2;
                $game->save();
                $res['text'] = "–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ...";
                $res['inline_keyboard']['inline_keyboard'] = [[['text'=>'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å','callback_data'=>'resume&'.$game->id]]];
            }
            else {
                $res['text'] = "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∏–≥—Ä—ã";
            }
            return [$res];

        }
        if(strpos($command,"unmute&")!==false  && Game::isGroupAdmin($from['id'],$group_id)) {
            try {
                $this->getApi()->deleteMessage(['chat_id'=>$group_id,'message_id'=>$hookUpdate['message_id']]);
            }
            catch(Exception $e) {

            }
            $cmd_arr = explode("&",$command);
            $this->unmute($cmd_arr[1],$group_id);
            return [];
        }
        if(strpos($command,'/stop@'.config('app.bot_nick'))!==false) {
            //—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->deleteMessage($group_id,$hookUpdate['message']['message_id']);
            //------------------------------
            $game_stop_all = Setting::groupSettingValue($group_id,'game_stop_all');
            if($game_stop_all!=='yes' && !Game::hasRightToStart($from['id'],$group_id)) {
                Log::info('non_stop');
                return [];
            }

            $game = GameModel::where('group_id',$group_id)->whereIn('status',[0,1])->first();
            if($game && $game->status == 1) {
                $game->status = 2;
                $game->save();
                DB::table('user_game_roles')->where(['game_id'=> $game->id])->update(['is_active'=>0]); //'is_active'=>1,
                $res['text'] = "<b>–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>";
            }
            else if($game && $game->status == 0) {
                Game::stopGameRegistration($game);
                $res['text'] = "<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>";
            }
            else {
                $res['text'] = "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∏–≥—Ä—ã";
            }
            return [$res];

        }
        if(strpos($command,"resume&")!==false) {
            $cmd_arr = explode('&',$command);
            $game = GameModel::where('id',$cmd_arr[1])->first();
            $res = [];
            if($game && $game->status == 2) {
                $game->status = 1;
                $game->save();
                $task = TaskModel::where('game_id',$cmd_arr[1])->orderByDesc('id')->first();
                if($task) {
                    $task->is_active = 1;
                    $task->save();
                    $res['text'] = "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ...";

                    if(isset($hookUpdate['message_id'])) {
                        try {
                            $this->getApi()->deleteMessage(['chat_id'=>$game->group_id,'message_id'=>$hookUpdate['message_id']]);
                        }
                        catch(Exception $e) {}
                    }
                }
            }
            if($res) return [$res];
        }       
        return [];
    }
}
