<?php
namespace App\Modules\Game\Roles;

use App\Models\GameRole;
use App\Models\GameUser;
use App\Models\ActiveBaf;
use App\Models\GamerParam;
use App\Modules\Game\Game;
use App\Models\LimitSelect;
use App\Modules\Bot\AppBot;
use App\Models\NightFunction;
use App\Models\DeactivatedCommand;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

trait Poet {
    public static function poetfind($params) {  //–ø–æ—ç—Ç. –Ω–æ—á–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
        $gamer = GameUser::where('user_id', $params['user_id'])->where('is_active', 1)->first();
        if(!$gamer) return '';
        GamerParam::saveParam($gamer,'poetfind',$params['cmd_param']);
        NightFunction::push_func($gamer->game, 'poetfind_itog');
    }
    public static function poetfind_itog($game) {
        $gameParams = GamerParam::gameParams($game);
        if(!isset($gameParams['poetfind'])) return null; //–æ—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        $victim = GameUser::where('id',$gameParams['poetfind'])->first(); //–ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π
        if(!$victim) return null; //–æ—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        $poet = GameUser::where('game_id',$game->id)->where('role_id',3)->first();
        if(!$poet || !self::isCanMove($poet)) {  //–æ–±–µ–∑–¥–≤–∏–∂–µ–Ω           
            return;
        }
        
        //–∫–æ–≥–æ –≤–∏–¥–∏—Ç
        DB::table('limit_select')->where(['gamer_id'=>$poet->id])->delete();
        LimitSelect::create(['gamer_id'=>$poet->id,'limit_select'=>$gameParams['poetfind']]);
        
        $viewActions = ['karleone_select','puaro_kill','manjak_select','dvulikiy_kill','oderjim_kill','ninzya_select','vedma_kill'];
        $poetTxtArr = [];
        foreach($viewActions as $action) {
            if(isset($gameParams[$action]) && $gameParams[$action] == $gameParams['poetfind']) {                
                //$kogoUvidel = GameUser::where(['game_id'=>$game->id,'role_id'=>$role->id])->first();
                $uvidelParam = GamerParam::where(['param_name'=>$action, 'game_id'=>$game->id, 'night'=>$game->current_night])->first();
                $kogoUvidel = null;
                if($uvidelParam) $kogoUvidel = $uvidelParam->gamer;
                if($kogoUvidel) {
                    $curTxt = "(". Game::userUrlName($kogoUvidel->user).' - '.$kogoUvidel->role.")";
                    //–µ—Å–ª–∏ –Ω–∞–π–¥–µ—Ç—Å—è –±–∞—Ñ, –ø–æ–¥–º–µ–Ω–∏–º —Ç–µ–∫—Å—Ç
                    $activeBafs = ActiveBaf::with('baf')->where(['game_id'=>$game->id,'user_id'=>$kogoUvidel->user_id,'is_active'=>1])->get();
                    foreach($activeBafs as $activeBaf) {
                      //  Log::channel('daily')->info('–∏—â–µ–º –±–∞—Ñ...');
                        $class = "\\App\\Modules\\Game\\Bafs\\".$activeBaf->baf->baf_class;
                        $actbaf = new $class($activeBaf);
                        $result = $actbaf->visit_role($kogoUvidel);
                        if($result) {
                          //  Log::channel('daily')->info('–Ω–∞—à–ª–∏...');
                            $curTxt = "–¢—ã –Ω–µ —Å–º–æ–≥ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Ü–∞ —É–±–∏–π—Ü—ã...";
                            break;
                        }
                    }
                    $poetTxtArr[] = $curTxt;
                }
                //break;
            }
        }
        if($poetTxtArr) {
            $poetTxt = "–í –ø–æ–∏—Å–∫–∞—Ö –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è —Ç—ã –ø—Ä–∏—à—ë–ª –∫ ".Game::userUrlName($victim->user).". –¢—ã –∑–∞–º–µ—Ç–∏–ª –∫–æ–≥–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ\n".
            implode("\n",$poetTxtArr)."\n\n –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ç–µ–±–µ –≤ –±—É–¥—É—â–µ–º...";
        }
        else $poetTxt = "–í –ø–æ–∏—Å–∫–∞—Ö –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è —Ç—ã –ø—Ä–∏—à—ë–ª –∫ ".Game::userUrlName($victim->user).". –ù–∏–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ç—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª.. ";
        $message = ['text'=>$poetTxt];
       // Log::channel('daily')->info('—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—ç—Ç—É: '.print_r($message,true));
        Game::message(['message'=>$message,'chat_id'=>$poet->user_id]);
        //–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ—ç—Ç –µ—â–µ —É–±—å–µ—Ç –∂–µ—Ä—Ç–≤—É, –µ—Å–ª–∏ –∫ –Ω–µ–º—É –∑–∞—à–µ–ª —à—É—Ç–Ω–∏–∫
        if(isset($gameParams['shutnik_poet']) && !self::isTreated($victim->id, $game) ) {
            self::user_kill($poet->id, $victim->id); //—É–±–∏–≤–∞–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º...
        }
    }
    public static function poet_butylka($params) {        
        $gamer = GameUser::where('user_id', $params['user_id'])->where('is_active', 1)->first();
        if($gamer) {
            $isDeactivated = DeactivatedCommand::where(['game_id'=>$gamer->game_id,'command'=>'poet_butylka'])->first();
            if($isDeactivated) {
                //–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º. —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞
                return;
            }
            DeactivatedCommand::create(['game_id'=>$gamer->game_id,'command'=>'poet_butylka']); //—Å—Ä–∞–∑—É –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            GamerParam::saveParam($gamer,'poet_butylka',$params['cmd_param']);
            NightFunction::push_func($gamer->game, 'poet_butylka_itog');
            self::execBafMethod($gamer, 'shot');
        }        
    }
    public static function poet_butylka_itog($game) {
        //Log::channel('daily')->info('poet_butylka_itog ... game = '.$game->id." night = ".$game->current_night);
        $gameParams = GamerParam::gameParams($game);
        if(!isset($gameParams['poet_butylka'])) {
           // Log::channel('daily')->info('–Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä poet_butylka');
            return null; //—Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—É—Å–∫
        }
        $poet = GameUser::where('role_id',3)->where('game_id',$game->id)->first();    
        if(!$poet || !self::isCanMove($poet)) {
         //   Log::channel('daily')->info('–ø–æ—ç—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–±–µ–∑–¥–≤–∏–∂–µ–Ω');
            return null; //–æ–±–µ–∑–¥–≤–∏–∂–µ–Ω
        }
        $victim = GameUser::where('id', $gameParams['poet_butylka'])->first();
        
        
        // if(self::isTreated($gameParams['poet_butylka'], $game)) {
        //    // Log::channel('daily')->info('–¥–æ–∫ —Å–ø–∞—Å –∂–µ—Ä—Ç–≤—É');
        //    if($gameParams['poet_butylka'] == 23) {
        //         $text = "–°–µ–≥–æ–¥–Ω—è –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É—à–µ–Ω–∏–µ –Ω–∞ <b>ü§µüèª‚Äç‚ôÇ–£–≥–æ–ª–æ–≤–Ω–∏–∫–∞</b>, –æ–¥–Ω–∞–∫–æ –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º";
        //         $bot = AppBot::appBot();
        //         $bot->sendAnswer([['text'=>$text]],$poet->user_id);
        //     } 
        //     return null; //–¥–æ–∫—Ç–æ—Ä —Å–ø–∞—Å
        // }
        
        if(isset($gameParams['shutnik_poet'])) {
            $gameParams['poet_butylka'] = $poet->id;
          //  Log::channel('daily')->info('–ø—Ä–∏—à–µ–ª —à—É—Ç–Ω–∏–∫. —É–±—å–µ—Ç —Å–µ–±—è');
        }
        if($victim && $victim->role_id == 23) {
            self::user_kill($poet->id, $gameParams['poet_butylka']);
        } elseif(!self::isTreated($gameParams['poet_butylka'], $game)) {                   
            self::user_kill($poet->id, $gameParams['poet_butylka']);             
        }
    }
}