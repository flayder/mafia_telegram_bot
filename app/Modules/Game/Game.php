<?php

namespace App\Modules\Game;

use Exception;
use App\Models\Baf;
use App\Models\Vote;
use App\Models\Union;
use App\Models\BotUser;
use App\Models\Setting;
use App\Models\UserBaf;
use App\Models\Voiting;
use App\Models\BotGroup;
use App\Models\GameRole;
use App\Models\GameUser;
use App\Models\ActiveBaf;
use App\Models\YesnoVote;
use App\Models\GamerParam;
use App\Modules\Functions;
use App\Models\Achievement;
use App\Models\LimitSelect;
use App\Models\UserBuyRole;
use App\Models\UserProduct;
use App\Modules\Bot\AppBot;
use App\Models\ProhibitKill;
use App\Models\NightFunction;
use App\Models\SleepKillRole;
use Faker\Provider\UserAgent;
use App\Models\GameRolesOrder;
use App\Models\UserAchievement;
use App\Models\UnionParticipant;
use App\Models\Game as GameModel;
use App\Models\Task as TaskModel;
use App\Models\DeactivatedCommand;
use App\Modules\Bot\GamerSaver;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Modules\Bot\MessageResultSaver;

class Game
{
    protected static $savedItemLists = [];
    const WHO_MAY_SELF = [3, 15, 16, 19];
    const COMMAND_COLORS = ['1' => 'üü¢', '2' => 'üü£'];
    public static function getNewRole($gameId)
    {
        //–¥–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π        
        $activeRoles = GameUser::selectRaw('role_id, count(*) as amount')->where('game_id', $gameId)->groupBy('role_id')->get();
        $selectRoles = [];
        foreach ($activeRoles as $aRole) {
            $selectRoles[$aRole->role_id] = $aRole->amount;
        }
        //---–∫–∞–∫—É—é —Å–µ–π—á–∞—Å –Ω–∞–¥–æ –≤—ã–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É –≤—ã–¥–∞—á–∏
        $roleOrder = GameRolesOrder::all()->all();
        $allRoles = [];
        if (isset($roleOrder[$activeRoles->count()])) {
            $allRoles = GameRole::where('role_type_id', $roleOrder[$activeRoles->count()]->role_type_id)->get()->all();
        } else { // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –Ω–∞–±—Ä–∞–Ω–æ
            return ['error' => 'game_limit'];
        }
        do {
            $roleIndex = random_int(0, count($allRoles) - 1);
            $role = $allRoles[$roleIndex];
        } while (isset($selectRoles[$role->id]) && $role->max_amount_in_game <= $selectRoles[$role->id]);
        return $role;
    }
    public static function comandaMessage(Union $union, $addText = '')
    {
        $text_arr = ["<b>–ö–æ–º–∞–Ω–¥–∞:</b>\n"];
        $participants = UnionParticipant::with('gamer')->where('union_id', $union->id)->orderBy('pos_in_union')->orderBy('id')->get();
        $userIds = [];
        foreach ($participants as $participant) {
            if (!$participant->gamer || !$participant->gamer->isActive()) continue;
            $text_arr[] = self::userUrlName($participant->gamer->user) . ' - ' . $participant->gamer->role;
            $userIds[] = $participant->gamer->user_id;
        }
        $message = ['text' => implode("\n", $text_arr) . $addText];
        foreach ($userIds as $userId) {
            self::message(['message' => $message, 'chat_id' => $userId]);
            usleep(35000);
        }
    }
    protected static function createUnionRoles($game_id, array $role_ids)
    {
        $unionGamers = GameUser::where('game_id', $game_id)->whereIn('role_id', $role_ids)->where('is_active', 1)->get();

        $union = null;
        if ($unionGamers->count() > 1) {
            $union = Union::create(['game_id' => $game_id]);
            $text_arr = ["<b>–ö–æ–º–∞–Ω–¥–∞ :</b>\n"];
            foreach ($unionGamers as $uGamer) {
                $pos_in_union = 0;
                switch ($uGamer->role_id) {
                    case 17:
                        $pos_in_union = 1;
                        break;
                    case 25:
                        $pos_in_union = 2;
                        break;
                    case 19:
                        $pos_in_union = 3;
                        break;
                    case 18:
                        $pos_in_union = 4;
                        break;
                    case 22:
                        $pos_in_union = 5;
                        break;
                }
                UnionParticipant::create(['union_id' => $union->id, 'gamer_id' => $uGamer->id, 'game_id' => $game_id, 'pos_in_union' => $pos_in_union]);
            }
            $unionParticips = UnionParticipant::with('gamer')->where('union_id', $union->id)->orderBy('pos_in_union')->orderBy('id')->get();
            foreach ($unionParticips as $up) {
                $text_arr[] = self::userUrlName($up->gamer->user) . ' - ' . $up->gamer->role;
            }

            $message = ['text' => implode("\n", $text_arr)];
            //—Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, –∫—Ç–æ –≤ —Å–æ—é–∑–µ
            foreach ($unionGamers as $uGamer) {
                self::message(['message' => $message, 'chat_id' => $uGamer->user_id]);
                usleep(35000);
            }
        }
        return $union;
    }
    public static function stopGameRegistration($game)
    {
        $bot = AppBot::appBot();
        if(!$game->options) return null;
        $options = json_decode($game->options, true);  // {"message_id":"2909"}
        if(!$options || !isset($options['message_id'])) return null;
        $bot->deleteMessage($game->group_id, $options['message_id']);
        if (isset($options['task'])) {
            $task = TaskModel::where('id', $options['task'])->first();
            if ($task) {
                $task->is_active = 0;
                $task->save();
            }
        }
        $game->options = null;
        $game->status = 2;
        $game->save();
        DB::table('user_game_roles')->where(['is_active' => 1, 'game_id' => $game->id])->update(['is_active' => 0]);
    }
    protected static function mixGamersRoles(array $gamers) {        
        $b = array_column($gamers,'role_id');
        for($i=0;$i<count($gamers);$i++) {
            $rind = random_int(0, count($b)-1);
            $gamers[$i]->role_id = $b[$rind];
            $gamers[$i]->save();
            unset($b[$rind]);
            $b = array_values($b);
        }
        return $gamers;
    }    
    public static function assignRolesToGamers($game_id)
    {        
        $game = GameModel::where('id', $game_id)->first();
        $game->start_at = date('Y-m-d H:i:s'); //–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
        $game->save();

        $buyRoleInTeam = Setting::groupSettingValue($game->group_id,'brole_in_team');
        $bot = AppBot::appBot();
        $gamers = GameUser::where('game_id', $game_id)->where('is_active', 1)->get()->all();
        $gCount = count($gamers);
        $gamerByUserId = [];
        foreach ($gamers as $gamer) $gamerByUserId[$gamer->user_id] = $gamer;

        $userIds = array_column($gamers, 'user_id');
        $buyRolesX = UserBuyRole::with('role')->whereIn('user_id', $userIds)->whereNull('game_id')->orderBy('id')->get();
        //—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—É–ø–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫–∏–Ω–µ–º
        $buyRoles = [];
        if(!$game->is_team || $buyRoleInTeam==='yes') {
            foreach($buyRolesX as $brx) {
                if(isset($buyRoles[$brx->user_id])) { //—É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å —É –∏–≥—Ä–æ–∫–∞, —Å–∫–∏–¥—ã–≤–∞–µ–º –µ–µ
                    $buyRoles[$brx->user_id]->game_id = -1;
                    $buyRoles[$brx->user_id]->save();
                }
                $buyRoles[$brx->user_id] = $brx;                
            }
            //—Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏–º —Ä–æ–ª–∏ –∑–∞–Ω–æ–≤–æ. –û–Ω–∏ —É–∂–µ —á–∏—Å—Ç—ã–µ, –±–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            $buyRoles = UserBuyRole::with('role')->with('buyRole')->whereIn('user_id', $userIds)->whereNull('game_id')->orderBy('id')->get();
        }        
        //–ø–æ–ª—É—á–∏–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏        
        $jsonRoles = Setting::groupSettingValue($game->group_id, 'roles');
        $isklRoles = [];
        if ($jsonRoles !== 'all') {
            $jObjRoles = json_decode($jsonRoles, true);
            foreach ($jObjRoles as $role_id => $roleSet) {
                if ($roleSet == 0) $isklRoles[] = $role_id;
            }
        }
        $rolesQuery = GameRolesOrder::with('role')->where('gamers_min', '<=', $gCount)->where('gamers_max', '>=', $gCount);
        if ($isklRoles) $rolesQuery = $rolesQuery->whereNotIn('role_id', $isklRoles);
        $roles = $rolesQuery->orderBy('position')->limit($gCount)->get()->all();

        if ($game->is_team && $buyRoleInTeam==='no') {
            $gamers =  GameUser::where('game_id', $game_id)->where('is_active', 1)->orderBy('team')->orderBy('id')->get()->all();
            //—Ä–∞—Å–∫–∏–Ω–µ–º —Ä–æ–ª–∏ –ø–æ –∫–∏–ª—Ç–∞–π–ø—É
            $rolesByKilltypes = [];
            for($i = 0;$i < count($gamers); $i++) {
                $comment = json_decode($roles[$i]->role->comment,1);
                $rolesByKilltypes[$comment['kill_type']][] = $roles[$i];
            }
            foreach($rolesByKilltypes as $kt=>$v) {
                shuffle($rolesByKilltypes[$kt]);
            }
            $gamersInTeamCnt =count($gamers)/2;             
            for ($i = 0; $i < $gamersInTeamCnt; $i++) {
                $killTypes = array_keys($rolesByKilltypes);
                do {
                    $kt = $killTypes[random_int(0, count($killTypes)-1)];
                }
                while(!isset($rolesByKilltypes[$kt][0]));
                $gamers[$i]->role_id = $rolesByKilltypes[$kt][0]->role_id;   //cmd1
                if(isset($rolesByKilltypes[$kt][1])) {
                    $gamers[$gamersInTeamCnt+$i]->role_id = $rolesByKilltypes[$kt][1]->role_id;  //cmd2
                    $rolesByKilltypes[$kt][1];
                    unset($rolesByKilltypes[$kt][1]);
                }
                else {
                    do {
                        $kt2 = $killTypes[random_int(0, count($killTypes)-1)];
                    }
                    while(!isset($rolesByKilltypes[$kt2][0]) || $kt2==$kt);
                    $gamers[$gamersInTeamCnt+$i]->role_id = $rolesByKilltypes[$kt2][0]->role_id;  //cmd2
                    unset($rolesByKilltypes[$kt2][0]);
                    $rolesByKilltypes[$kt2] = array_values($rolesByKilltypes[$kt2]);
                }
                unset($rolesByKilltypes[$kt][0]);
                $rolesByKilltypes[$kt] = array_values($rolesByKilltypes[$kt]);

                $gamers[$i]->save();
                $gamers[$gamersInTeamCnt+$i]->save();
            }
            /* —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥
            for ($i = 0; $i < count($gamers); $i++) {
                $gamers[$i]->role_id = $roles[$i]->role_id;
                $gamers[$i]->save();
            }
            //–ø–µ—Ä–µ–º–µ—à–∞–µ–º —Ä–æ–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
            $t1gamers = GameUser::where('game_id', $game_id)->where('is_active', 1)->where('team', 1)->get()->all();
            $t2gamers = GameUser::where('game_id', $game_id)->where('is_active', 1)->where('team', 2)->get()->all();
            self::mixGamersRoles($t1gamers);
            self::mixGamersRoles($t2gamers);
            */
        } else {
            $accessRoleIds = array_column($roles, 'role_id');
            $ggroup = $game->group;
            $roleCounts = [];
            foreach ($roles as $role) {
                $roleCounts[$role->role_id] = ($roleCounts[$role->role_id] ?? 0) + 1;
            }
            $giveRolesCounts = [];
            //–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ç—å —Ä–æ–ª—å
            //Log::channel('daily')->info("–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ç—å —Ä–æ–ª—å ...");
            $whoGiveRole = [];
            foreach ($buyRoles as $buyRole) {
                if (in_array($buyRole->role_id, $accessRoleIds)) {
                    $giveCount = $giveRolesCounts[$buyRole->role_id] ?? 0;
                    if ($giveCount < $roleCounts[$buyRole->role_id]) {
                        $giveRolesCounts[$buyRole->role_id] = $giveCount + 1;
                        $buyRole->game_id = $game_id;
                        $buyRole->save();
                        //–Ω–∞—á–∏—Å–ª–∏–º –Ω–∞–≥—Ä–∞–¥—É –≥—Ä—É–ø–ø–µ
                        if($buyRole->buyRole->cur_code === Currency::R_WINDCOIN) {                            
                            $descr = "–ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏ {$buyRole->role}, –∏–≥—Ä–∞ $game_id";
                            $ggroup->addReward($buyRole->buyRole->price, $descr, $game_id);
                        }
                        //----------------------------
                        $gamerByUserId[$buyRole->user_id]->role_id = $buyRole->role_id;
                        $gamerByUserId[$buyRole->user_id]->save();
                        $whoGiveRole[] = $buyRole->user_id;
                    }
                }
            }
            //Log::channel('daily')->info("–∫—Ç–æ –ø–æ–ª—É—á–∏–ª —Ä–æ–ª–∏: ".implode(', ',$whoGiveRole));
            //—Ç–µ–ø–µ—Ä—å —Ä–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏ —Ç–µ–º, –∫—Ç–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª
            $gamers =  GameUser::where('game_id', $game_id)->whereNotIn('user_id', $whoGiveRole)->where('is_active', 1)->get()->all();
            shuffle($gamers);
            $gCount = count($gamers);
            //Log::channel('daily')->info("–∫–æ–º—É –µ—â–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–∞—Ç—å: ".implode(', ',array_column($gamers,'user_id')));
            foreach ($gamers as $gamer) {
                foreach ($roleCounts as $role_id => $rMaxCnt) {
                    $giveCount = $giveRolesCounts[$role_id] ?? 0;
                    if ($giveCount < $rMaxCnt) {
                        $giveRolesCounts[$role_id] = $giveCount + 1;
                        $gamer->role_id = $role_id;
                        $gamer->save();
                        break;
                    }
                }
            }
        }

        //—Ä–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –î–∞–µ–º –±–∞—Ñ—ã
        $jsonBafs = Setting::groupSettingValue($game->group_id, 'bafs');
        $isklBafs = [];
        if ($jsonBafs !== 'all') {
            $jsonBafs = json_decode($jsonBafs, true);
            foreach ($jsonBafs as $baf_id => $bafSet) {
                if ($bafSet == 0) $isklBafs[] = $baf_id;
            }
        }

        $gamers2 = GameUser::with('role')->where('game_id', $game_id)->where('is_active', 1)->get()->all();
        $gUserIds = array_column($gamers2, 'user_id');
        $bafQuery = UserBaf::whereIn('user_id', $gUserIds)->where('amount', '>', 0)->where('is_activate', 1);
        if ($isklBafs) $bafQuery = $bafQuery->whereNotIn('baf_id', $isklBafs);
        $ubafs = $bafQuery->get();
        $activeBafs = [];
        foreach ($ubafs as $ubaf) {
            $activeBafs[$ubaf->user_id][] = $ubaf->baf_id;
        }
        foreach ($gamers2 as $gamer) {
            if (isset($activeBafs[$gamer->user_id])) {
                $actUserBafs = Baf::whereIn('id', $activeBafs[$gamer->user_id])->get();
                foreach ($actUserBafs as $actBaf) {
                    $assign_role_ids = empty($actBaf->assign_role_ids) ? [$gamer->role_id] : explode(',', $actBaf->assign_role_ids);
                    if (in_array($gamer->role_id, $assign_role_ids)) {
                        $need_decrement = 1;
                        if (in_array($actBaf->id, [1, 2])) {
                            $need_decrement = 0;
                            $ubaf = UserBaf::where(['baf_id' => $actBaf->id, 'user_id' => $gamer->user_id])->first();
                            if ($ubaf) {
                                $ubaf->decrement('amount');
                                //----–∏ –Ω–∞–≥—Ä–∞–¥–∞ –≥—Ä—É–ø–ø–µ
                                if($ubaf->baf->cur_code === Currency::R_WINDCOIN) {
                                    $ggroup->addReward($ubaf->baf->price,"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞—Ñ–∞ {$ubaf->baf} –≤ –∏–≥—Ä–µ $game_id",$game_id);
                                }                                
                            }
                        }
                        ActiveBaf::create(['game_id' => $game_id, 'user_id' => $gamer->user_id, 'baf_id' => $actBaf->id, 'need_decrement' => $need_decrement]);
                    }
                }
            }

            //—Å–æ–æ–±—â–∏–º –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
            usleep(35000);
            if(!$gamer->role) Log::error("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å!!! –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$gamer->user_id} –≤ –∏–≥—Ä–µ {$gamer->game_id}");
            else $bot->sendAnswer([['text' => $gamer->role->first_message]], $gamer->user_id);
        }

        //365373627
        //1022125755
        // foreach($gamers2 as $gamer) {
        //     $bot->sendAnswer([['text' => $gamer->user_id . '=' . $gamer->role->name]], 365373627);
        // }


        // –°–æ–∑–¥–∞–¥–∏–º —Å–æ—é–∑—ã        
        self::createUnionRoles($game_id, [4, 5]); //1) –∫–æ–º–º–∏—Å–∞—Ä –∏ —Å–µ—Ä–∂–∞–Ω—Ç
        self::createUnionRoles($game_id, [14, 15]); //2) –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –¥–æ–∫—Ç–æ—Ä        
        $mafUnion = self::createUnionRoles($game_id, [17, 18, 19, 22, 25]); //3) –º–∞—Ñ–∏—è  //—É–±—Ä–∞–ª–∏ 16 - –ø–æ–¥–ø–æ–ª—å–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        if ($mafUnion) {
            //Log::channel('daily')->info("–ï—Å—Ç—å mafUnion. –°–æ—Ö—Ä–∞–Ω—è–µ–º... ");
            GamerParam::saveParam($gamers2[0], 'maf_union', $mafUnion->id);
        } else {
            //Log::channel('daily')->error("–ù–µ—Ç mafUnion");
        }

        //–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        self::createGameProcess($game_id);
    }
    public static function assignRolesToGamersOld($game_id)
    {
        $opredeleno = []; //'376753094' => 17,'1074132476'=>6
        $bot = AppBot::appBot();
        $gamers = GameUser::where('game_id', $game_id)->get()->all();
        shuffle($gamers);
        $gCount = count($gamers);
        $roles = GameRolesOrder::with('role')->where('gamers_min', '<=', $gCount)->where('gamers_max', '>=', $gCount)
            ->orderBy('position')->get()->all();

        $oprGamers = [];
        for ($i = 0; $i < $gCount; $i++) {
            $gamers[$i]->role_id = $roles[$i]->role_id;
            $gamers[$i]->save();
            if (isset($opredeleno[$gamers[$i]->user_id])) {
                $oprGamers[] = $gamers[$i];
            }
        }

        foreach ($oprGamers as $oprGamer) {
            if ($oprGamer->role_id != $opredeleno[$oprGamer->user_id]) {
                $gm2 = GameUser::where('game_id', $oprGamer->game_id)->where('role_id', $opredeleno[$oprGamer->user_id])->first();
                if ($gm2) {
                    $gm2->role_id = $oprGamer->role_id;
                    $gm2->save();
                }
                $oprGamer->role_id = $opredeleno[$oprGamer->user_id];
                $oprGamer->save();
            }
        }
        $gamers2 = GameUser::with('role')->where('game_id', $game_id)->get()->all();
        $gUserIds = array_column($gamers2, 'user_id');
        $ubafs = UserBaf::whereIn('user_id', $gUserIds)->where('amount', '>', 0)->where('is_activate', 1)->get();
        $activeBafs = [];
        foreach ($ubafs as $ubaf) {
            $activeBafs[$ubaf->user_id][] = $ubaf->baf_id;
        }
        foreach ($gamers2 as $gamer) {
            if (isset($activeBafs[$gamer->user_id])) {
                $actUserBafs = Baf::whereIn('id', $activeBafs[$gamer->user_id])->get();
                foreach ($actUserBafs as $actBaf) {
                    $assign_role_ids = empty($actBaf->assign_role_ids) ? [$gamer->role_id] : explode(',', $actBaf->assign_role_ids);
                    if (in_array($gamer->role_id, $assign_role_ids)) {
                        $need_decrement = 1;
                        if (in_array($actBaf->id, [1, 2])) {
                            $need_decrement = 0;
                            $ubaf = UserBaf::where(['baf_id' => $actBaf->id, 'user_id' => $gamer->user_id])->first();
                            if ($ubaf) $ubaf->decrement('amount');
                        }
                        ActiveBaf::create(['game_id' => $game_id, 'user_id' => $gamer->user_id, 'baf_id' => $actBaf->id, 'need_decrement' => $need_decrement]);
                    }
                }
            }
            //—Å–æ–æ–±—â–∏–º –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
            usleep(35000);
            $bot->sendAnswer([['text' => $gamer->role->first_message]], $gamer->user_id);
        }


        //—Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã. –°–æ–∑–¥–∞–¥–∏–º —Å–æ—é–∑—ã        
        self::createUnionRoles($game_id, [4, 5]); //1) –∫–æ–º–º–∏—Å–∞—Ä –∏ —Å–µ—Ä–∂–∞–Ω—Ç
        self::createUnionRoles($game_id, [14, 15]); //2) –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –¥–æ–∫—Ç–æ—Ä        
        $mafUnion = self::createUnionRoles($game_id, [16, 17, 18, 19, 22, 25]); //3) –º–∞—Ñ–∏—è
        if ($mafUnion) GamerParam::saveParam($gamers[0], 'maf_union', $mafUnion->id);

        //–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        self::createGameProcess($game_id);
    }

    public static function message(array $params)
    {
        $bot = AppBot::appBot();
        try {
            $bot->sendAnswer([$params['message']], $params['chat_id']);
        } catch (Exception $e) {
            Log::error($e->getMessage());
        }
    }
    public static function itemlistFromModel($model, $where)
    {
        if (!isset(self::$savedItemLists[$model][$where])) {
            self::$savedItemLists[$model][$where] = $model::whereRaw($where)->get();
        }
        return self::$savedItemLists[$model][$where];
    }
    public static function night_rassilka($game_id)
    {
        $game = GameModel::where('id', $game_id)->first();
        $bot = AppBot::appBot();
        $gamers = GameUser::with('role')->where('game_id', $game_id)->where('is_active', 1)->get()->all();
        $gamersIds = array_column($gamers, 'id');
        $deactivateList = DeactivatedCommand::all_deactivated($game_id);
        $participGroups = UnionParticipant::gamerIdsOfUnions($game_id);
        $limitSelect = LimitSelect::gamersLimits($gamersIds);
        $securedOfKill = ProhibitKill::where('expire_time', '>', date('Y-m-d H:i'))->where('group_id',$game->group_id)->where('night_count', '>=', $game->current_night)->get()->all();
        $securedOfKillUserIds = array_column($securedOfKill, 'user_id');
        foreach ($gamers as $gamer) {
            if ($gamer->role->night_message_priv && !empty(trim($gamer->role->night_message_priv))) {
                $mess = json_decode($gamer->role->night_message_priv, true);

                if (isset($mess['name']) && in_array($mess['name'], $deactivateList)) continue;
                if (isset($mess['variants'])) {
                    $selmes = null;
                    foreach ($mess['variants'] as $var1) {
                        if (isset($var1['name']) && in_array($var1['name'], $deactivateList)) continue;
                        $selmes = $var1;
                        break;
                    }
                    if (!$selmes) continue;
                    $mess = $selmes;
                }
                try {
                    $res = ['text' => $mess['text']];
                    $res['saver'] = new GamerSaver($gamer);
                } catch (Exception $e) {
                    Log::error("gamer id: " . $gamer->id . " : " . $e->getMessage());
                }

                // –Ω–µ –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º—É–∂–∞ –µ—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∫–∏ —É–∂–µ –Ω–µ—Ç –≤–∂–∏–≤—ã—Ö
                if($gamer->role_id == 34 && !GameUser::where(['game_id' => $game->id, 'role_id' => 6, 'is_active' => 1])->first()) {
                    DeactivatedCommand::create(['game_id'=>$game->id,'command'=>'muzh_select']);
                    GamerParam::saveParam($gamer, 'afk', $gamer->id);
                    continue;
                }

                // –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —É–º–µ—Ä –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –≤—ã–±—Ä–∞–ª –∏–ª–∏ –æ–±—É—á–∏–ª —Å—Ç—É–¥–µ–Ω—Ç–∞, —Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –∞—Ñ–∫
                if($gamer->role_id == 22) {
                    if(!GameUser::where(['game_id' => $game->id, 'role_id' => 21, 'is_active' => 1])->first()) {
                        DeactivatedCommand::create(['game_id'=>$game->id,'command'=>'professor_select']);
                        DeactivatedCommand::create(['game_id'=>$game->id,'command'=>'professor_teach']);
                        GamerParam::saveParam($gamer, 'afk', $gamer->id);
                        continue;
                    }
                }

                if (isset($mess['buttons'])) {
                    foreach ($mess['buttons'] as $button) {
                        if (isset($button['pattern'])) {
                            $pattern = $button['pattern'];
                            $model = "\\App\\Models\\" . $pattern['model'];
                            if (isset($pattern['where'])) {
                                $keys = [];
                                $values = [];
                                foreach ($pattern['params'] as $ck => $cv) {
                                    $keys[] = '#' . $ck;
                                    $values[] = (string) $gamer->$cv;
                                }
                                $pattern['where'] = str_replace($keys, $values, $pattern['where']);
                                $itemList = self::itemlistFromModel($model, $pattern['where']); //—ç–∫–æ–Ω–æ–º–∏–º –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
                            } else $itemList = $model::all();
                            $tGrp = [$gamer->id];
                            foreach ($participGroups as $pGrp) {
                                if (in_array($gamer->id, $pGrp)) {
                                    $tGrp = $pGrp;
                                    break;
                                }
                            }
                            foreach ($itemList as $item) {
                                if (!in_array($gamer->role_id, self::WHO_MAY_SELF) && $pattern['model'] == 'GameUser' && in_array($item->id, $tGrp)) continue;
                                if (
                                    $pattern['model'] == 'GameUser' && isset($limitSelect[$gamer->id]) &&
                                    in_array($item->id, $limitSelect[$gamer->id])
                                ) continue;
                                //–∫–æ–≥–æ –Ω–µ–ª—å–∑—è —É–±–∏—Ç—å 2 –∏–ª–∏ 5 –Ω–æ—á–µ–π------------------------------------------
                                if (( isset($button['is_kill']) ) && $pattern['model'] == 'GameUser'   //|| isset($button['is_stop'])
                                    && in_array($item->user_id, $securedOfKillUserIds)
                                ) continue;
                                //-------------------------------------------------------------------------    
                                $keys = [];
                                $values = [];
                                foreach ($pattern['params'] as $ck => $cv) {
                                    $keys[] = '#' . $ck;
                                    $value = (string) $item->$cv;
                                    if ($pattern['model'] == 'GameUser' && $ck == 'username' && $item->team) {
                                        $value = self::COMMAND_COLORS[$item->team] . $value;
                                    }
                                    $values[] = $value;
                                }
                                $res['inline_keyboard']['inline_keyboard'][] = [
                                    [
                                        "text" => str_replace($keys, $values, $button['text']),
                                        "callback_data" => str_replace($keys, $values, $button['callback'])
                                    ]
                                ];
                            }
                        } else {
                            if (!in_array($button['callback'], $deactivateList)) {
                                $res['inline_keyboard']['inline_keyboard'][] = [['text' => $button['text'], 'callback_data' => $button['callback']]];
                            }
                        }
                    }
                    if (isset($res['inline_keyboard']['inline_keyboard']) && $res['inline_keyboard']['inline_keyboard']) {
                        $skip_move_night = Setting::groupSettingValue($game->group_id, 'skip_move_night');
                        if ($skip_move_night === 'yes') {
                            $res['inline_keyboard']['inline_keyboard'][] = [['text' => "üö∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'callback_data' => "nightactionempty"]];
                        }
                    }
                }
                usleep(50000);
               // Log::channel('daily')->info('–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ' . print_r($res, true));
                $bot->sendAnswer([$res], $gamer->user_id);
            }
        }
    }
    public static function userUrlName(BotUser $user)
    {
        return "<a href='tg://user?id={$user->id}'>" . $user . '</a>';
    }
    protected static function messRolesArrayToStr($messRoles)
    {
        $strMessRoles = [];
        foreach ($messRoles as $k => $v) {
            if ($v > 1) $strMessRoles[] = "$k - $v";
            else $strMessRoles[] = $k;
        }
        return implode(', ', $strMessRoles);
    }
    public static function live_gamers_mess(GameModel $game)
    {
        $mirs = GamerParam::where('game_id',$game->id)->where('param_name','mir')->get()->all();
        $mirIds = array_column($mirs,'gamer_id');
        $messNicks = [];
        $messRoles = [];
        $mirRoles = [];
        $mafRoles = [];
        $neitrals = [];
        $iter = 0;
        $gamers = GameUser::with('role')->with('user')->where('game_id', $game->id)->orderBy('team')->orderBy('sort_id')->orderBy('id')->get(); //—Å–ø–µ—É–∏–ª—å–Ω–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á—Ç–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞
        foreach ($gamers as $gamer) {
            $iter++;
            if ($gamer->is_active != 1) continue;
            $messNicks[] = "$iter. " . ($gamer->team ? self::COMMAND_COLORS[$gamer->team] : '') . "<a href='tg://user?id={$gamer->user_id}'>" . $gamer->user . '</a>';
            $messRoles['' . $gamer->role] = ($messRoles['' . $gamer->role] ?? 0) + 1;
            if(in_array($gamer->id,$mirIds)) {
                $mirRoles['' . $gamer->role] = ($mirRoles['' . $gamer->role] ?? 0) + 1;
                continue;
            }
            if(!$gamer || !$gamer->role) continue;

            switch ($gamer->role->view_role_type_id ?? $gamer->role->role_type_id) {                
                case 1:
                    if ($gamer->role_id == 10 && GamerFunctions::oderjimIsNeytral($game)) {
                        $neitrals['' . $gamer->role] = 1;
                    } else $mirRoles['' . $gamer->role] = ($mirRoles['' . $gamer->role] ?? 0) + 1;
                    break;
                case 2:
                    $mafRoles['' . $gamer->role] = ($mafRoles['' . $gamer->role] ?? 0) + 1;
                    break;
                case 3:
                    $neitrals['' . $gamer->role] = ($neitrals['' . $gamer->role] ?? 0) + 1;
                    break;
            }
        }
        ksort($messRoles);
        $message = ['text' => "<b>–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n" . implode("\n", $messNicks) .
            "\n\n<b>–ò–∑ –Ω–∏—Ö:</b>\n"];
        $view_role_commands = Setting::groupSettingValue($game->group_id, 'view_role_commands');
        if ($view_role_commands === 'yes') {
            if ($mirRoles) {
                ksort($mirRoles);
                $message['text'] .= "\n<b>–ö–æ–º–∞–Ω–¥–∞ –º–∏—Ä–Ω—ã—Ö: " . array_sum($mirRoles) . "</b>\n" . self::messRolesArrayToStr($mirRoles) . "\n";
            }
            if ($mafRoles) {
                ksort($mafRoles);
                $message['text'] .= "\n<b>–ö–æ–º–∞–Ω–¥–∞ –º–∞—Ñ–∏–∏: " . array_sum($mafRoles) . "</b>\n" . self::messRolesArrayToStr($mafRoles) . "\n";
            }
            if ($neitrals) {
                ksort($neitrals);
                $message['text'] .= "\n<b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–π—Ç—Ä–∞–ª–æ–≤: " . array_sum($neitrals) . "</b>\n" . self::messRolesArrayToStr($neitrals) . "\n";
            }
        } else {
            $message['text'] .= self::messRolesArrayToStr($messRoles) . "\n";
        }
        $message['text'] .= "\n<b>–í—Å–µ–≥–æ: " . array_sum($messRoles) . "</b>";
        return $message;
    }
    public static function night($game_id)
    { //–Ω–æ—á—å! —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–µ–Ω—å 
        $game = GameModel::where('id', $game_id)->first();
        $game->times_of_day = GameModel::NIGHT;
        $game->current_night++;
        $game->save();

        //self::sleep_kill($game);  //–∫–æ–≥–æ —É–±–∏–ª —Å–æ–Ω

        if ($gameOver = self::isGameOver($game_id)) {
            $game = GameModel::where('id', $game_id)->first();
            self::stopGame($game, $gameOver);
            return null;
        }
        $chat_id = $game->group_id;
        //—Ä–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        //2-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $message = ['text' => "<b>üåâ –ù–æ—á—å –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∞ –≥–æ—Ä–æ–¥</b>\n<i>–ü–æ–¥ –ø–æ–∫—Ä–æ–≤–æ–º –Ω–æ—á–∏ –ø—Ä—è—á—É—Ç—Å—è —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–æ—à–º–∞—Ä—ã, –∑–∞—Ç–∞–∏–≤—à–∏–µ—Å—è –≤ —É–≥–æ–ª–∫–∞—Ö —Ç–µ–º–Ω–æ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è.\n–ù–∞ —É–ª–∏—Ü—ã –≤—ã—Ö–æ–¥—è—Ç –∂–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞, –Ω–æ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∂–∏–≤—ã–º–∏...</i>"];
        $message['video'] = 'public/theme/img/night.mp4';
        $message['inline_keyboard']['inline_keyboard'] = [[[
            'text' => '–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É',
            'url' => "http://t.me/".config('app.bot_nick')
        ]]];
        $params = ['chat_id' => $chat_id, 'message' => $message];
        $options = ['class' => Game::class, 'method' => 'message', 'param' => $params];
        //–æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Ñ—É –æ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ 1-—è –Ω–æ—á—å
        if ($game->current_night > 1) {
            $mafunParam = GamerParam::where(['game_id' => $game->id, 'param_name' => 'maf_union'])->first();
            $unions = Union::where('game_id', $game_id)->get();
            foreach ($unions as $union) {
                if (isset($mafunParam) && $mafunParam->param_value == $union->id && GamerFunctions::isBlacklady($game)) {
                    $addText = GamerFunctions::allBlackLadyChecks($game);
                    self::comandaMessage($union, $addText);
                } else self::comandaMessage($union);
            }
        }

        TaskModel::create(['game_id' => $game_id, 'name' => '1-e —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—á—å. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 2]);
        //—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        $options = ['class' => Game::class, 'method' => 'night_rassilka', 'param' => $game_id];
        TaskModel::create(['game_id' => $game_id, 'name' => '–ù–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –õ–°. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 3]);
        //3-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $message = self::live_gamers_mess($game);
        $params = ['chat_id' => $chat_id, 'message' => $message];
        $options = ['class' => Game::class, 'method' => 'message', 'param' => $params];
        TaskModel::create(['game_id' => $game_id, 'name' => '2-e —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—á—å. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 6]);

        //–∏ –¥–µ–Ω—å
        $night_duration = Setting::groupSettingValue($game->group_id, 'night_duration');
        $options = ['class' => Game::class, 'method' => 'day', 'param' => $game_id];
        TaskModel::create(['game_id' => $game_id, 'name' => '–î–µ–Ω—å. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => $night_duration + 3]);
    }

    public static function finish_night_actions($game)
    {
        NightFunction::load_funcs($game);
        while ($func = NightFunction::shift_func()) {
            $sfunc = $func->func_name;
            GamerFunctions::$sfunc($game);
        }
    }
    public static function sleep_kill($game)
    {
        // if($game->current_night < 3) return null;  //–Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å 3-–π –Ω–æ—á–∏. –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –Ω–æ—á–∏ –ø–µ—Ä–µ–¥ –Ω–æ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
        $sleepKillroles = SleepKillRole::where('test_nights_count', '<', $game->current_night + 1)->get();
        $afkList = GamerParam::afkList($game->id);
        foreach ($sleepKillroles as $skRole) {
            $roleGamer = GameUser::where('game_id', $game->id)->where('is_active', 1)->where('role_id', $skRole->role_id)->first();
            if (!$roleGamer) continue;
            if(in_array($roleGamer->id,$afkList)) continue; //—É—Å–ø–µ–ª —Å—Ç–∞—Ç—å –ê–§–ö. –ù–µ —É–±–∏–≤–∞–µ–º
            $need_kill = true;
            $commands = explode(',', $skRole->need_commands);
            $commands[] = 'nightactionempty';
            $query = GamerParam::with('gamer')->where('game_id', $game->id)->whereIn('param_name', $commands);
            if (!$skRole->is_one) {
                $nights = [];
                for ($i = 1; $i <= $skRole->test_nights_count; $i++) {
                    $nights[] = $game->current_night + 1 - $i;
                }
                $query = $query->whereIn('night', $nights);
            }
            $params = $query->get();
            foreach ($params as $param) {
                if ($param->gamer && $param->gamer->role_id == $skRole->role_id) {  //—É—Ä–∞, –Ω–∞—à–ª–∏, –Ω–µ —É–±–∏–≤–∞–µ–º
                    $need_kill = false;
                    break;
                }
            }
            if ($need_kill) {
                $roleGamer->is_active  = 0;
                $roleGamer->save();
                $message = ['text' => "–¢–µ–±—è —É–±–∏–ª —Å–æ–Ω"];
                self::message(['message' => $message, "chat_id" => $roleGamer->user_id]);
                $groupMessage = ['text' => "üò¥–°–µ–≥–æ–¥–Ω—è —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏ –ø–æ–≥–∏–± <b>" . self::userUrlName($roleGamer->user) . " - {$roleGamer->role},</b> —Å–æ–Ω –∑–∞–±—Ä–∞–ª –µ–≥–æ –≤ —Å–≤–æ–∏ –æ–±—ä—è—Ç–∏—è –Ω–∞–≤–µ–∫–∏..."];
                self::message(['message' => $groupMessage, "chat_id" => $game->group_id]);
            }
        }
    }
    public static function autostart($game_id)
    {
        $bot = AppBot::appBot();
        $game = GameModel::where('id', $game_id)->first();
        //–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        $gamers = GameUser::where('game_id', $game_id)->get();
        if ($gamers->count() < 5) {
            self::stopGameRegistration($game);
            $res['text'] = '<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</b>';
            $bot->sendAnswer([$res], $game->group_id);
            return;
        }
        if ($game->is_team) {
            $team1 = GameUser::where('game_id', $game->id)->where('team', 1)->get();
            $team2 = GameUser::where('game_id', $game->id)->where('team', 2)->get();
            if ($team1->count() !== $team2->count()) {
                self::stopGameRegistration($game);
                $res['text'] = '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º...</b>';
                $bot->sendAnswer([$res], $game->group_id);
                return;
            }
        }
        //-----------------------------
        $res['text'] = '<b>–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ–∏ —Ä–æ–ª–∏...</b>';
        if($game->group_id == '-1002082482712') $res['text'] = "<b>–ò–≥—Ä–∞ #{$game->id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ–∏ —Ä–æ–ª–∏...</b>"; //–ú–∞—Ñ–∏—è —Ç–µ—Å—Ç
        if ($game->status > 0) return;

        $options = json_decode($game->options, true);  // {"message_id":"2909"}
        try {
            $bot->getApi()->deleteMessage(['chat_id' => $game->group_id, 'message_id' => $options['message_id']]);
        } catch (Exception $e) {
        }

        $game->options = null;
        $game->status = 1;
        $game->save();

        $bot->sendAnswer([$res], $game->group_id);
        $options = ['class' => self::class, 'method' => 'assignRolesToGamers', 'param' => $game_id];
        TaskModel::create(['game_id' => $game_id, 'name' => '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options)]);
    }
    public static function correctRoleKill($gamer)
    {
        if($gamer->role_id == 4) {
            if($gamer->first_role_id == 5) {
                if(GameUser::where('game_id', $gamer->game_id)->where('role_id', 8)->orWhere('first_role_id', 8)->count() > 0) {
                    $checkRole = 0;

                    foreach(GameUser::where('game_id', $gamer->game_id)->where('role_id', 4)->get() as $us) {
                        $checkRole++;
                        $us->update(['is_active' => 0]);
                    }

                    if($checkRole > 1) {
                        $gamer->update(['role_id' => 5]);
                        return 'üëÆ‚Äç‚ôÇ–°–µ—Ä–∂–∞–Ω—Ç –ì–∞—Å—Ç–∏–Ω–≥—Å';
                    }
                }
            }
        }

        return $gamer->role;
    }
    public static function day($game_id)
    { //–¥–µ–Ω—å!          
        $game = GameModel::where('id', $game_id)->first();
        $chat_id = $game->group_id;
        //–∫–æ–Ω–µ—Ü –Ω–æ—á–∏
        self::finish_night_actions($game);

        //–Ω–∞—á–∞–ª–æ –¥–Ω—è ...
        $message = ['text' => "üåÖ<b>–£—Ç—Ä–æ: {$game->current_night}</b>\n<i>–ì–æ—Ä–æ–¥ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è. –£—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ—Ç–µ—Ä –Ω–µ—Å–µ—Ç –∑–∞–ø–∞—Ö –∫—Ä–æ–≤–∏ –∏ —Ç–∞–π–Ω...</i>"];
        if ($game->current_night > 1) $message['video'] = 'public/theme/img/morning2.mp4';
        else {
            $message['video'] = 'public/theme/img/morning1.mp4';
            DeactivatedCommand::create(['game_id' => $game_id, 'command' => 'first_night']); //–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤–æ–π –Ω–æ—á–∏
        }
        self::message(['message' => $message, 'chat_id' => $chat_id]);

        self::sleep_kill($game);  //–∫–æ–≥–æ —É–±–∏–ª —Å–æ–Ω
        //–∫—Ç–æ –±—ã–ª —É–±–∏—Ç
        $who_killed = GameUser::with('killer')->where('game_id', $game_id)->where('kill_night_number', $game->current_night)->get();
        $killedInfoArr = [];
        $set_view_killers = Setting::groupSettingValue($game->group_id, 'view_killers');
        foreach ($who_killed as $killedGamer) {
            if($killedGamer->first_role_id != 37)
                $mess = "–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –±—ã–ª —É–±–∏—Ç <b>" . $killedGamer->role . "</b> " . self::userUrlName($killedGamer->user);
            else
                $mess = "–°–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –±—ã–ª —É–±–∏—Ç <b>üêæ–û–±–æ—Ä–æ—Ç–µ–Ω—å</b> " . self::userUrlName($killedGamer->user);

            if ($killedGamer->killer_id == -1) $mess .= "\n–ì–æ–≤–æ—Ä—è—Ç, —É–º–µ—Ä –æ–Ω –æ—Ç –æ—Ç—á–∞—è–Ω–∏—è";
            if ($killedGamer->killer_id > 0 && $set_view_killers === 'yes') {
                $mess .= "\n–ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –µ–≥–æ —É–±–∏–ª <b>{$killedGamer->killer->role}</b>";
                if ($killedGamer->killers) {
                    $killersArrIds = explode(',', $killedGamer->killers);
                    $killerGamers = GameUser::with('role')->whereIn('id', $killersArrIds)->get();
                    foreach ($killerGamers as $kgm) {
                        $mess .= ", <b>{$kgm->role}</b>";
                    }
                }
            }
            $killedInfoArr[] = $mess;
        }
        sleep(1);
        if ($killedInfoArr) {
            $message = ['text' => implode("\n\n", $killedInfoArr)];
            self::message(['message' => $message, 'chat_id' => $chat_id]);
        } else {
            $message = ['text' => "<i>–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ –≤–∑–¥–æ—Ö–Ω—É–ª–∏ —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º ‚Äì –æ–±–æ—à–ª–æ—Å—å –±–µ–∑ –∂–µ—Ä—Ç–≤...</i>"];
            self::message(['message' => $message, 'chat_id' => $chat_id]);
        }

        if ($gameOver = self::isGameOver($game_id)) {
            $game = GameModel::where('id', $game_id)->first();
            self::stopGame($game, $gameOver);
            return null;
        }
        GamerFunctions::messagesAfterKills($game);
        GamerFunctions::topGamersIfNeed($game);
        $game->times_of_day = GameModel::DAY;
        $game->save();

        //–∂–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏
        $message = self::live_gamers_mess($game);
        $message['text'] .= "\n\n<i>–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å —É–±–∏–π—Ü...</i>";
        $params = ['chat_id' => $chat_id, 'message' => $message];
        $options = ['class' => Game::class, 'method' => 'message', 'param' => $params];
        TaskModel::create(['game_id' => $game_id, 'name' => '2-e —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–Ω—å. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 2]);
        //–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        $delay = Setting::groupSettingValue($game->group_id, 'golos_delay');
        $options = ['class' => Game::class, 'method' => 'voting', 'param' => $game_id];
        TaskModel::create(['game_id' => $game_id, 'name' => '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => $delay]);
    }
    public static function voting($game_id)
    { //–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        $game = GameModel::where('id', $game_id)->first();
        $chat_id = $game->group_id;
        $golos_long = Setting::groupSettingValue($game->group_id, 'golos_long_time');
        $message = ['text' => "<b>–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ —Ä–µ—à–∞—é—Ç –Ω–∞–∫–∞–∑–∞—Ç—å –≤–∏–Ω–æ–≤–Ω–∏–∫–æ–≤.</b>\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è $golos_long —Å–µ–∫—É–Ω–¥."];
        $message['inline_keyboard']['inline_keyboard'] = [[[
            'text' => '–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É',
            'url' => "http://t.me/".config('app.bot_nick')
        ]]];
        $params = ['chat_id' => $chat_id, 'message' => $message];
        self::message($params);
        //—Å–æ–∑–¥–∞–¥–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        $voiting = Voiting::create(['game_id' => $game_id, 'long_in_seconds' => $golos_long]);
        //–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –õ–°
        $message = ['text' => "<b>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞—Ç—å –≤–∏–Ω–æ–≤–Ω—ã—Ö.</b>\n–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ª–∏–Ω—á–µ–≤–∞—Ç—å?"];
        $lives = GameUser::with('user')->where('game_id', $game_id)->where('is_active', 1)->orderBy('sort_id')->get();
        $bot = AppBot::appBot();

        $upGroups = UnionParticipant::gamerIdsOfUnions($game_id);

        $gameParams = GamerParam::gameParams($game);
        $skip_move_day = Setting::groupSettingValue($game->group_id, 'skip_move_day');
        foreach ($lives as $gamer) {
            if (!GamerFunctions::isCanMove($gamer)) continue;  //–Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç –ø–æ–¥ –∫—Ä–∞—Å–æ—Ç–∫–æ–π 
            $selGroup = null;
            foreach ($upGroups as $grp) {
                if (in_array($gamer->id, $grp)) {
                    $selGroup = $grp;
                    break;
                }
            }
            //–¥–Ω–µ–º –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–±—è. –¥—Ä—É–≥–∏—Ö –Ω–µ –Ω–∞–¥–æ
            if ($game->is_team) {
                $message['inline_keyboard'] = $bot->inlineKeyboard($lives, 1, "voitprot_{$voiting->id}_", false, 'id', 'comandaname', [$gamer->id]);
                if ($skip_move_day === 'yes') {
                    $message['inline_keyboard']['inline_keyboard'][] = [['text' => "üö∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'callback_data' => "voitprot_{$voiting->id}_empty"]];
                }
            } else {
                $prefTemplate = '';
                if (in_array($gamer->role_id, [17, 18, 19, 25])) $prefTemplate = 'ü§µüèª';
                if (in_array($gamer->role_id, [4, 5]))  $prefTemplate = 'üëÆ‚Äç‚ôÇÔ∏è';
                if (in_array($gamer->role_id, [14, 15]))  $prefTemplate = 'üßëüèº‚Äç‚öï';
                $prefix = $selGroup ? $prefTemplate : '';
                $message['inline_keyboard'] = $bot->inlineKeyboard($lives, 1, "voitprot_{$voiting->id}_", false, 'id', 'user', [$gamer->id], $prefix, $selGroup);
                if ($skip_move_day === 'yes') {
                    $message['inline_keyboard']['inline_keyboard'][] = [['text' => "üö∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 'callback_data' => "voitprot_{$voiting->id}_empty"]];
                }
            }

            usleep(35000);
            self::message(['message' => $message, 'chat_id' => $gamer->user_id]);
        }
        //–ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è/ –∑–∞–¥–∞—á–∞
        $options = ['class' => self::class, 'method' => 'voting_itogs', 'param' => $voiting->id];
        TaskModel::create(['game_id' => $game_id, 'name' => '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ò—Ç–æ–≥–∏. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => $golos_long]);
    }
    public static function  yes_no_buttons($gamer_id, $voiting_id, $yes_count = 0, $no_count = 0)
    {
        $yes_cnt = $yes_count ? $yes_count : '';
        $no_cnt = $no_count ? $no_count : '';
        $result['inline_keyboard'] = [[
            ["text" => "{$yes_cnt}üëç", "callback_data" => "gallow_" . $gamer_id . "_" . $voiting_id . "_yes"],
            ["text" => "{$no_cnt}üëé", "callback_data" => "gallow_" . $gamer_id . "_" . $voiting_id . "_no"]
        ]];
        return $result;
    }
    public static function voting_itogs($voiting_id)
    {
        $voiting = Voiting::where('id', $voiting_id)->first();
        if ($voiting) {
            $voiting->is_active = 0;
            $voiting->save();
            //–ø–æ—Å—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥, –∑–∞ –∫–æ–≥–æ –±–æ–ª—å—à–µ –≥–æ–ª–æ—Å–æ–≤
            $voteWinners = Vote::selectRaw("gamer_id,sum(if(vote_role_id = 1, 2, 1)) as votes_amount")->where('voiting_id', $voiting_id)->groupBy('gamer_id')
                ->orderByDesc('votes_amount')->limit(2)->get();
            $voteWinner = null;
            foreach ($voteWinners as $kandWinner) { //—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º 1-—Ö –¥–≤—É—Ö –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –∫–æ–ª-–≤—É –≥–æ–ª–æ—Å–æ–≤
                if (!$voteWinner) $voteWinner = $kandWinner;
                else if ($voteWinner->votes_amount == $kandWinner->votes_amount) {
                    $voteWinner = null;
                }
            }
            if (!$voteWinner) {
                $message = ['text' => "<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ</b>\n<i>–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É –º–Ω–µ–Ω–∏—é... –û–Ω–∏ —Ä–∞–∑–æ—à–ª–∏—Å—å –ø–æ —Å–≤–æ–∏–º –¥–µ–ª–∞–º, —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –∏ –Ω–µ –ø–æ–≤–µ—Å–∏–≤...</i>"];
                self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
                //–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å
                $options = ['class' => Game::class, 'method' => 'night', 'param' => $voiting->game_id];
                TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–Ω–æ—á—å. –ò–≥—Ä–∞ ' . $voiting->game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 4]);
            } else {
                $gameParams = GamerParam::gameParams($voteWinner->gamer->game);
                // Log::info('Game itogs', [
                //     'GamerFunctions::isGodfatherSave($voteWinner->gamer)' => GamerFunctions::isGodfatherSave($voteWinner->gamer),
                //     'user' => print_r($voteWinner->gamer, true)
                // ]);
                if (GamerFunctions::isGodfatherSave($voteWinner->gamer)) {
                    $message = ['text' => "–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü –≤–∑—è–ª " . self::userUrlName($voteWinner->gamer->user) . " –ø–æ–¥ —Å–≤–æ—é –∑–∞—â–∏—Ç—É."];
                    self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
                    $options = ['class' => Game::class, 'method' => 'night', 'param' => $voiting->game_id];
                    TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–Ω–æ—á—å. –ò–≥—Ä–∞ ' . $voiting->game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 6]);
                    return null;
                }
                if (isset($gameParams['advokat_select']) && $gameParams['advokat_select'] == $voteWinner->gamer->id) {
                    $text = "–ê–¥–≤–æ–∫–∞—Ç –∑–∞—â–∏—Ç–∏–ª <a href='tg://user?id={$voteWinner->gamer->user_id}'>{$voteWinner->gamer->user}</a> –æ—Ç –ø–æ–≤–µ—à–µ–Ω—å—è";
                    $message = ['text' => $text];
                    self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
                    $options = ['class' => Game::class, 'method' => 'night', 'param' => $voiting->game_id];
                    TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–Ω–æ—á—å. –ò–≥—Ä–∞ ' . $voiting->game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 6]);
                    return null;
                }
                //–±–∞—Ñ—Ñ—ã                
                $activeBafs = ActiveBaf::with('baf')->where(['game_id' => $voiting->game_id, 'user_id' => $voteWinner->gamer->user_id, 'is_active' => 1])->get();
                foreach ($activeBafs as $activeBaf) {
                    $class = "\\App\\Modules\\Game\\Bafs\\" . $activeBaf->baf->baf_class;
                    $actbaf = new $class($activeBaf);
                    $result = $actbaf->gallow($voteWinner->gamer);
                    if ($result) {
                        $text = "–í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤–µ—Å–∏—Ç—å <a href='tg://user?id={$voteWinner->gamer->user_id}'>{$voteWinner->gamer->user}</a>. –û–Ω –±—ã–ª —Ö–∏—Ç—Ä–µ–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ–≤–µ—à–µ–Ω–∏—è";
                        $message = ['text' => $text];
                        self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
                        $options = ['class' => Game::class, 'method' => 'night', 'param' => $voiting->game_id];
                        TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–Ω–æ—á—å. –ò–≥—Ä–∞ ' . $voiting->game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 6]);
                        return null;
                    }
                }


                $message = ['text' => "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤–µ—Å–∏—Ç—å {$voteWinner->gamer->user} ?"];
                $message['inline_keyboard'] = self::yes_no_buttons($voteWinner->gamer->id, $voiting_id);
                $bot = AppBot::appBot();
                $message['saver'] = new MessageResultSaver($voiting->game);
                $bot->sendAnswer([$message], $voiting->game->group_id);
                //self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
                $options = ['class' => self::class, 'method' => 'voting_yesno_itogs', 'param' => $voiting->id];
                $delay = Setting::groupSettingValue($voiting->game->group_id, 'yesno_votes_long');
                TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ò—Ç–æ–≥–∏2', 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => $delay]);
            }
        }
    }
    public static function voting_yesno_results($voiting_id)
    {
        $results = YesnoVote::selectRaw("answer, gamer_id, sum(if(vote_role_id = 1, 2, 1)) as votes_amount")->where('voiting_id', $voiting_id)->groupBy('answer')->groupBy('gamer_id')->get();
        $answers = ['yes' => 0, 'no' => 0, 'gamer_id' => 0];
        foreach ($results as $result) {
            $answers[$result->answer] = $result->votes_amount;
            $answers['gamer_id'] = $result->gamer_id;
        }
        return $answers;
    }

    public static function anyDangerous($gamer)
    {
        $dangs = GamerParam::where([
            'game_id'       => $gamer->game_id,
            'param_value'   => $gamer->id,
            'night'         => $gamer->game->current_night
        ])
            ->whereIn('param_name', ['manjak_select', 'karleone_select', 'mafiya_select'])
            ->orWhere('param_name', 'like', '%kill%')
            ->first();
            
        if($dangs)
            return true;

        return false;
    }

    public static function actionsAfterDie(GameUser $gamer)
    {
        //–µ—Å–ª–∏ –µ–≥–æ –≤—ã–±—Ä–∞–ª –î—É–±–ª–µ—Ä
        $paramDubler = GamerParam::where(['game_id' => $gamer->game_id, 'param_name' => 'dubler_select'])->orderByDesc('id')->first();
        if ($paramDubler && $paramDubler->param_value == $gamer->id) {
            $nightDiff = $gamer->game->current_night - $paramDubler->night;
            if ($nightDiff > 0 && $nightDiff < 3) {
                $dubler = GameUser::where('game_id', $gamer->game_id)->where('role_id', 8)->first();
                if ($dubler->isActive()) { //–Ω–∞–¥–æ –∫–∞–∫-—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å  
                    GamerParam::saveParam($dubler, 'is_dubler_change',$gamer->id);
                    
                    //–∫–æ–ø–∏—Ä—É–µ–º —Ä–æ–ª—å –¥–æ–Ω–æ—Ä–∞                    
                    if (!$dubler->first_role_id) $dubler->first_role_id = $dubler->role_id;
                    $dubler->role_id = $gamer->role_id;
                    $dubler->save();
                    //–±—ã–ª –ª–∏ Union. –ï—Å–ª–∏ –¥–∞ -- –æ–±–Ω–æ–≤–∏–º
                    $participant = UnionParticipant::where(['gamer_id' => $gamer->id])->first();
                    if ($participant) {
                        $participant->gamer_id = $dubler->id;
                        $participant->save();
                    }
                    sleep(1);
                    // $gameP = GamerParam::gameParams($gamer->game); 
                    // Log::info('is_dubler_change', [
                    //     'is_dubler_change' => print_r($gameP, true)
                    // ]);
                }
            }
        }

        if ($gamer->role_id == 6) { //–∫—Ä–∞—Å–æ—Ç–∫–∞
            DeactivatedCommand::firstOrCreate(['game_id' => $gamer->game_id, 'command' => 'lubovnik_select']); //–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ª—é–±–æ–≤–Ω–∏–∫–∞  
            DeactivatedCommand::firstOrCreate(['game_id' => $gamer->game_id, 'command' => 'sutener_select']); //–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å—É—Ç–µ–Ω–µ—Ä–∞  
            DeactivatedCommand::firstOrCreate(['game_id' => $gamer->game_id, 'command' => 'muzh_select']); //–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ú—É–∂–∞
        }
        GamerFunctions::ifIdolOderjimActivate($gamer); //–Ω–∞—á–Ω–µ—Ç –∏–≥—Ä–∞—Ç—å –æ–¥–µ—Ä–∂–∏–º—ã–π
        //–µ—Å–ª–∏ –ø—É–∞—Ä–æ
        if ($gamer->role_id == 4) {
            //–∏—â–µ–º —Å–µ—Ä–∂–∞–Ω—Ç–∞
            $sergant = GameUser::where('game_id', $gamer->game_id)->where('role_id', 5)->where('is_active', 1)->first();
            if ($sergant && !self::anyDangerous($sergant)) {
                if (!$sergant->first_role_id) $sergant->first_role_id = $sergant->role_id;
                $sergant->role_id = 4;
                $sergant->save(); //–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º
                GamerParam::saveParam($sergant, 'sergant_top', 1);
                GamerParam::saveParam($sergant, 'nightactionempty', 1); //—á—Ç–æ–± –Ω–µ —É–º–µ—Ä –æ—Ç –∞—Ñ–∫
            }
        }

        //–µ—Å–ª–∏ –î–æ–∫—Ç–æ—Ä
        if ($gamer->role_id == 15) {
            //–∏—â–µ–º –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
            $asist = GameUser::where('game_id', $gamer->game_id)->where('role_id', 14)->where('is_active', 1)->first();
            if ($asist) {
                if (!$asist->first_role_id) $asist->first_role_id = $asist->role_id;
                $asist->role_id = 15;
                $asist->save(); //–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º
                GamerParam::saveParam($asist, 'assistent_top', 1);
                GamerParam::saveParam($asist, 'nightactionempty', 1); //—á—Ç–æ–± –Ω–µ —É–º–µ—Ä –æ—Ç –∞—Ñ–∫             
            }
        }

        //–µ—Å–ª–∏ –¥–æ–Ω
        if ($gamer->role_id == 17) { //–∏—â–µ–º –º–∞—Ñ–∏—é —á—Ç–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å
           // Log::channel('daily')->info("–∏—â–µ–º –º–∞—Ñ–∏—é —á—Ç–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–ª—å...");
            $maf = GameUser::where('game_id', $gamer->game_id)->where('role_id', 25)->where('is_active', 1)->first();
            if ($maf) {
               // Log::channel('daily')->info("–Ω–∞—à–ª–∏ {$maf->id} " . $maf->user);
                /* –Ω–µ –±—É–¥–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º –∑–¥–µ—Å—å –∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—â–µ–º –º–µ—Ç–æ–¥–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–º–µ—Ä—Ç–µ–π
                if (!$maf->first_role_id) $maf->first_role_id = $maf->role_id;
                $maf->role_id = 17;
                $maf->save(); //–Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø—Ä–∏–µ–º–Ω–∏–∫–æ–º
                GamerParam::saveParam($maf, 'nightactionempty', 1); //—á—Ç–æ–± –Ω–µ —É–º–µ—Ä –æ—Ç –∞—Ñ–∫
                GamerParam::saveParam($maf, 'mafiya_is_top', 1);
                */
                
            } else { //–µ—Å–ª–∏ –º–∞—Ñ–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–∂ —É –¥–≤—É–ª–∏–∫–æ–≥–æ? –∏ –¥–∞–¥–∏–º
                $dvulikiy = GameUser::where('game_id', $gamer->game_id)->where('role_id', 20)->first();
                if ($dvulikiy) {
                    $isKnight = DeactivatedCommand::where(['game_id' => $gamer->game_id, 'command' => 'dvulikiy_find'])->first();
                    if (!$isKnight) {
                        DeactivatedCommand::create(['game_id' => $gamer->game_id, 'command' => 'dvulikiy_find']);
                        $text = "–ü–æ—Å–ª–µ–¥–Ω–∏–π –î–æ–Ω —É–º–µ—Ä. –¢–µ–ø–µ—Ä—å –≤ —Ç–≤–æ–∏ —Ä—É–∫–∏ –ø–æ–ø–∞–ª –Ω–æ–∂...";
                        $bot = AppBot::appBot();
                        $bot->sendAnswer([['text' => $text]], $dvulikiy->user_id);
                    }
                }
            }
        }
    }

    public static function voting_yesno_itogs($voiting_id)
    {
        $voiting = Voiting::where('id', $voiting_id)->first();
        $bot = AppBot::appBot();
        if ($voiting) {
            $voiting->is_active = 2;
            $voiting->save();
            //—É–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if ($voiting->game->options) {
                $options = json_decode($voiting->game->options, true);
                try {
                    $bot->getApi()->deleteMessage(['chat_id' => $voiting->game->group_id, 'message_id' => $options['message_id']]);
                } catch (Exception $e) {
                }
            }
        }
        $answers = self::voting_yesno_results($voiting_id);
        $gamer = GameUser::where('id', $answers['gamer_id'])->first();
        $isKill = false;
        if ($answers['yes'] > $answers['no']) {
            if ($gamer) {
                $text = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n{$answers['yes']}üëç | {$answers['no']}üëé
                \n<i>–°–µ–≥–æ–¥–Ω—è –±—ã–ª –ø–æ–≤–µ—à–µ–Ω</i> <a href='tg://user?id={$gamer->user_id}'>{$gamer->user}</a>\n–†–æ–ª—å –µ–≥–æ –±—ã–ª–∞ <b>{$gamer->role}</b>";
                $gamer->kill_night_number = $gamer->game->current_night;
                $gamer->is_active = 0;
                $gamer->save();

                self::actionsAfterDie($gamer);
                $isKill = true;
            }
        } else {
            $text = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n{$answers['yes']}üëç | {$answers['no']}üëé
            \n<i>–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É –º–Ω–µ–Ω–∏—é... –û–Ω–∏ —Ä–∞–∑–æ—à–ª–∏—Å—å –ø–æ —Å–≤–æ–∏–º –¥–µ–ª–∞–º, —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –∏ –Ω–µ –ø–æ–≤–µ—Å–∏–≤...</i>";
        }
        if(isset($text)) {
            $message = ['text' => $text];
            self::message(['message' => $message, 'chat_id' => $voiting->game->group_id]);
        }

        if ($isKill) {
            GamerFunctions::messagesAfterKills($gamer->game);
            GamerFunctions::topGamersIfNeed($gamer->game);
        }
        //–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å
        $gameOver = self::isGameOver($voiting->game_id);
        if ($gameOver) {
            self::stopGame($voiting->game, $gameOver);
        } else {
            if ($isKill && $gamer && $gamer->role->kill_message && !empty(trim($gamer->role->kill_message))) { //—Ä–∞—Å—Å—ã–ª–∫–∞ –±–æ–º–±—ã –ø–æ—Å–ª–µ –ø–æ–≤–µ—à–µ–Ω–∏—è. —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                $killmess = json_decode($gamer->role->kill_message, true);
                if (isset($killmess['gallow'])) {
                    $func = $killmess['gallow'];
                    GamerFunctions::$func($gamer);
                }
            }
            $options = ['class' => Game::class, 'method' => 'night', 'param' => $voiting->game_id];
            TaskModel::create(['game_id' => $voiting->game_id, 'name' => '–Ω–æ—á—å. –ò–≥—Ä–∞ ' . $voiting->game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 9]);
        }
    }
    public static function achievementUsers($winners)
    {
        //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        //—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥ —É –∫–∞–∂–¥–æ–≥–æ –∑–∞ –µ–≥–æ —Ä–æ–ª—å
        $bot = AppBot::appBot();
        $winsMatrix = [];
        foreach ($winners as $winner) {
            $winsMatrix[$winner->user_id][$winner->role_id] = $winner;
        }
        $winsCounts = GameUser::selectRaw("user_id, role_id, count(*) as win_amount")->where('is_active', 2)->groupBy('user_id')->groupBy('role_id')->get();
        foreach ($winsCounts as $winCount) {
            if (isset($winsMatrix[$winCount->user_id][$winCount->role_id])) {
                $win = $winsMatrix[$winCount->user_id][$winCount->role_id];
                if ($winCount->win_amount < 10) continue;
                $achiev = Achievement::where('role_id', $win->role_id)->where('win_amount', '<=', $winCount->win_amount)->orderByDesc('win_amount')->first();
                if (!$achiev) continue;
                $uAchiev = UserAchievement::where(['user_id' => $win->user_id, 'achievement_id' => $achiev->id])->first();
                if (!$uAchiev) { //–¥–æ–±–∞–≤–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    UserAchievement::create(['user_id' => $win->user_id, 'achievement_id' => $achiev->id]);
                    $bot->sendAnswer([['text' => "<b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. </b>\n\n" . $achiev->name]], $win->user_id);
                }
            }
        }
    }
    public static function stopGame($game, $gameOver)
    { //–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π        
        
        DB::table('tasks')->where('game_id', $game->id)->update(['is_active' => 0]);  //—É–±–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        $game->status = 2;
        $game->save();

        $isWinnerIfLive = [27, 32, 35, 29, 26]; //–ø–æ–±–µ–¥–∏–ª –µ—Å–ª–∏ –≤—ã–∂–∏–ª, –Ω–µ –≤–∞–∂–Ω–æ —Å –∫–µ–º
        if ($gameOver['winners'] == 3) $isWinnerIfLive[] = 37;
        if($gameOver['winners'] ==1) {
            $gbnParams = GamerParam::gameBeforeNightsParams($game,$game->current_night+1);
            if(isset($gbnParams['oboroten_sel']) && $gbnParams['oboroten_sel'] == 1) {
                $isWinnerIfLive[] = 37;
            }
        }

        //–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä–µ —É–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π
        if(!$game->is_team) {
            //–æ—Ç–µ–¥–ª—å–Ω—ã–µ —Ä–æ–ª–∏
            $lubovnik = GameUser::where('game_id', $game->id)->where('role_id', 7)->first();
            if ($lubovnik) { //–µ—Å—Ç—å –ª–∏ –ª—é–±–æ–≤–Ω–∏–∫, –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                $krasotka = GameUser::where('game_id', $game->id)->where('role_id', 6)->first();
                $lubovnik_check = GamerParam::where(['game_id' => $game->id, 'param_name' => 'lubovnik_find', 'param_value' => $krasotka->id])->first();
                if ($lubovnik_check) {
                    $lubovnik->is_active = 2;
                    $lubovnik->save();
                }
            }
            $muzh = GameUser::where('game_id', $game->id)->where('role_id', 34)->first();
            if ($muzh) {
                $muzh_check = GamerParam::where(['game_id' => $game->id, 'param_name' => 'muzh_win'])->first();
                if ($muzh_check) {
                    $muzh->is_active = 2;
                    $muzh->save();
                }
            }

            $sutener = GameUser::where('game_id', $game->id)->where('role_id', 36)->first();
            if ($sutener) { //–µ—Å—Ç—å –ª–∏ —Å—É—Ç–µ–Ω–µ—Ä, –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
                $sutener_check = GamerParam::where(['game_id' => $game->id, 'param_name' => 'sutener_find'])->first();
                if ($sutener_check) {
                    $sutener->is_active = 2;
                    $sutener->save();
                }
            }
        }

        //–∫–æ–º–∞–Ω–¥—ã
        $winners = GameUser::with('role')->where('game_id', $game->id)->where('is_active', 1)->get();

        if ($gameOver['winners'] == 1) { //–º–∏—Ä—ã                   
            foreach ($winners as $winner) {
                if ($winner->role->role_type_id == 1) { //–º–∏—Ä–æ–≤ –≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
                    $winner->is_active = 2;
                } else if (in_array($winner->role_id, $isWinnerIfLive)) {
                    $winner->is_active = 2;
                } else {  //–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
                    $winner->is_active = 0;
                }
                //if($winner->first_role_id) $winner->role_id = $winner->first_role_id;
                $winner->save();
            }
        }
        if ($gameOver['winners'] == 2) { //–º–∞—Ñ—ã                    
            foreach ($winners as $winner) {
                if ($winner->role->role_type_id == 2) { //–º–∞—Ñ–æ–≤ –≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
                    $winner->is_active = 2;
                } else if (in_array($winner->role_id, $isWinnerIfLive)) {
                    $winner->is_active = 2;
                } else {  //–æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ
                    $winner->is_active = 0;
                }
                /*
                if ($winner->role_id == 10 && GamerFunctions::oderjimIsNeytral($game)) {
                    $winner->is_active = 2; //–æ–¥–µ—Ä–∂–∏–º—ã–π –µ—Å–ª–∏ –≤—ã–∂–∏–ª –∏ —Å—Ç–∞–ª –Ω–µ–π—Ç—Ä–∞–ª–æ–º –ø–æ–±–µ–¥–∏–ª
                }
                    */
                // if($winner->first_role_id) $winner->role_id = $winner->first_role_id;
                $winner->save();
            }
        }
        if ($gameOver['winners'] == 3) {
            foreach ($winners as $winner) {
                if (in_array($winner->id, $gameOver['winner_list'])) $winner->is_active = 2;
                else if (in_array($winner->role_id, $isWinnerIfLive)) {
                    $winner->is_active = 2;
                } else $winner->is_active = 0;

                // if($winner->first_role_id) $winner->role_id = $winner->first_role_id;
                $winner->save();
            }
        }
        //—Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        $winners = GameUser::with('role')->with('user')->where('game_id', $game->id)->where('is_active', 2)->get()->all();
        $text_winners_arr = [];
        $index = 1;
        $winmess = ['text' => "üåü –í—ã –ø–æ–±–µ–¥–∏–ª–∏. –í–∞—à –≤—ã–∏–≥—Ä—ã—à 50 üí∂"];
        foreach ($winners as $winner) {
            $text_winners_arr[] = $index . ". ".($winner->team ? self::COMMAND_COLORS[$winner->team] : '')
             . self::userUrlName($winner->user) . ' - ' . $winner->role;
            $index++;
            //–¥–∞–¥–∏–º –±–∞–∫—Å—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
            if ($winner->user_id > 10001) {
                $user = $winner->user;
                $user->addBalance(Currency::R_WINDBUCKS, 50);
                self::message(['message' => $winmess, 'chat_id' => $winner->user_id]);
            }
        }
        self::achievementUsers($winners);

        $otherGamers = GameUser::with('role')->with('user')->where('game_id', $game->id)->where('is_active', 0)->get()->all();
        $others = [];
        foreach ($otherGamers as $other) {
            $others[] = $index . ". " .($other->team ? self::COMMAND_COLORS[$other->team] : '')
            . self::userUrlName($other->user) . ' - ' . $other->role;
            $index++;
            //–¥–∞–¥–∏–º –±–∞–∫—Å—ã –µ—Å–ª–∏ –≤—ã–∂–∏–ª 4 –∏–ª–∏ >=5
            if ($other->kill_night_number < 5) { //–≤—ã–∂–∏–ª 4 –Ω–æ—á–∏
                if ($other->user_id > 10001) {
                    $user = $other->user;
                    $user->addBalance(Currency::R_WINDBUCKS, 20);
                    $omess = ['text' => "–í–∞—à –≤—ã–∏–≥—Ä—ã—à 20 üí∂"];
                    self::message(['message' => $omess, 'chat_id' => $other->user_id]);
                }
            } else {
                if ($other->user_id > 10001) {
                    $user = $other->user;
                    $user->addBalance(Currency::R_WINDBUCKS, 30);
                    $omess = ['text' => "–í–∞—à –≤—ã–∏–≥—Ä—ã—à 30 üí∂"];
                    self::message(['message' => $omess, 'chat_id' => $other->user_id]);
                }
            }
        }
        //–æ–±—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π        
        $start = strtotime($game->start_at); //strtotime($game->created_at);
        $end = time();
        $longGame = round(($end - $start) / 60);
        $message = ['text' => "<b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n\n<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n" . implode("\n", $text_winners_arr) .
            "\n\n<b>–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏:</b>\n" . implode("\n", $others) . "\n\n<i>–ò–≥—Ä–∞ –¥–ª–∏–ª–∞—Å—å $longGame –º–∏–Ω.</i>"];
        self::message(['message' => $message, 'chat_id' => $game->group_id]);
    }
    protected static function createGameProcess($game_id)
    {
        $game = GameModel::where('id', $game_id)->first();
        if ($game) {
            $chat_id = $game->group_id;
            //1-e —Å–æ–æ–±—â–µ–Ω–∏–µ
            $message = ['text' => "<b>üÉè–ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é —Ä–æ–ª—å, –Ω–æ –≤—Å–µ –ª–∏ —Å–º–æ–≥—É—Ç –µ—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?</b>\n–¢—É—á–∏ –Ω–∞–¥ —É–ª–∏—Ü–∞–º–∏ –í–∏–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–≥—É—â–∞—Ç—å—Å—è."];
            $message['inline_keyboard']['inline_keyboard'] = [[[
                'text' => '–£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å',
                'url' => "https://t.me/".config('app.bot_nick')
            ]]];
            $params = ['chat_id' => $chat_id, 'message' => $message];
            $options = ['class' => Game::class, 'method' => 'message', 'param' => $params];
            TaskModel::create(['game_id' => $game_id, 'name' => '1-e —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE)]);
            $options = ['class' => Game::class, 'method' => 'night', 'param' => $game_id];
            TaskModel::create(['game_id' => $game_id, 'name' => '1-—è –Ω–æ—á—å. –ò–≥—Ä–∞ ' . $game_id, 'options' => json_encode($options, JSON_UNESCAPED_UNICODE), 'delay' => 4]);
        }
    }

    public static function vigruzka()
    {
        $roles = GameRole::all();
        $commands = [];
        foreach ($roles as $role) {
            if ($role->night_message_priv && !empty(trim($role->night_message_priv))) {
                $mess = json_decode(trim($role->night_message_priv), true);
                foreach ($mess['buttons'] as $btn) {
                    $commands[$btn['callback']] = [['text' => $btn['text']]];
                }
            }
        }
        return $commands;
    }

    public static function isGameOver($game_id)
    {
        $game = GameModel::where('id', $game_id)->first();
        $gamers = GameUser::with('role')->where('game_id', $game_id)->where('is_active', 1)->get();
        if ($game->is_team) {  //–∫–æ–º–∞–Ω–¥–∞—è –∏–≥—Ä–∞
            $teams = [];
            foreach ($gamers as $gamer) {
                $teams[$gamer->team] = 1;
                if (isset($teams[1]) && isset($teams[2]))  return [];  //–ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç
            }
            //–µ—Å–ª–∏ —Ü–∏–∫–ª –æ—Ç–∫—Ä—É—Ç–∏–ª–∏ –∏ –Ω–µ –≤—ã—à–ª–∏, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            $keys = array_keys($teams);
            $luzer_team = $keys[0] == 1 ? 2 : 1;
            $winTeamUsers = GameUser::where('game_id', $game_id)->where('team', $keys[0])->get()->all();
            $result = ['winners' => 3, 'winner_list' => array_column($winTeamUsers, 'id')];
            DB::table('user_game_roles')->where(['game_id' => $game_id, 'team' => $keys[0]])->update(['is_active' => 2]);
            DB::table('user_game_roles')->where(['game_id' => $game_id, 'team' => $luzer_team])->update(['is_active' => 0]);
            return $result;
        }

        $gRtCounts = [];
        $result = [];
        $killNejtrals = [28, 30];
        if(GamerFunctions::oderjimIsNeytral($game)) $killNejtrals[] = 10; //–¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –µ—Å–ª–∏ —É—Å–ø–µ–ª –ø–µ—Ä–µ–≤–æ–ø–ª–æ—Ç–∏—Ç—å—Å—è
        $killMafs = [17, 23, 25];
        if(GamerFunctions::ifDvulikiyShouldHaveKnife($game)) $killMafs[] = 20; //–¥–æ–±–∞–≤–ª—è–µ–º –¥–≤—É–ª–∏–∫–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–∂
        $isKillNejtrall = [];
        $isKillMafs = [];
        $mirs = GamerParam::where('game_id',$game->id)->where('param_name','mir')->get()->all();
        $mirIds = array_column($mirs,'gamer_id');
        foreach ($gamers as $gamer) {
            if(in_array($gamer->id,$mirIds)) {
                $gRtCounts[1] = ($gRtCounts[1] ?? 0) + 1;
            } elseif (in_array($gamer->role_id, $killNejtrals)) {
                $isKillNejtrall[] = $gamer->id;
                $gRtCounts[3] = ($gRtCounts[3] ?? 0) + 1;
            } elseif (in_array($gamer->role_id, $killMafs)) {
                $isKillMafs[] = $gamer->id;
                $gRtCounts[2] = ($gRtCounts[2] ?? 0) + 1;
            } else {
                if(!$gamer->role) continue;
                $gRtCounts[$gamer->role->view_role_type_id ?? $gamer->role->role_type_id ?? 0] = ($gRtCounts[$gamer->role->view_role_type_id ?? $gamer->role->role_type_id] ?? 0) + 1;
            }
        }
        if ($isKillNejtrall) {
            if (!isset($gRtCounts[2]) && !isset($gRtCounts[1]))  $result = ['winners' => 3, 'winner_list' => $isKillNejtrall];
        } else {
            if (($gRtCounts[2] ?? 0) >= ($gRtCounts[1] ?? 0)) {
                $result = ['winners' => 2];
            }
            if (($gRtCounts[2] ?? 0) < ($gRtCounts[1] ?? 0) && !$isKillMafs) {
                $result = ['winners' => 1];
            }
        }

        // Log::info('Game over testing', [
        //     '$killMafs' => print_r($killMafs, true),
        //     '$killNejtrals' => print_r($killNejtrals, true),
        //     '$isKillNejtrall' => print_r($isKillNejtrall, true),
        //     '$isKillMafs' => print_r($isKillMafs, true),
        //     '$result' => print_r($result, true),
        //     '$gRtCounts' => print_r($gRtCounts, true),
        //     '$mirIds' => print_r($mirIds, true)
        // ]);

        if ($result) {
            $game = GameModel::where('id', $game_id)->first();
            $game->status = 2;
            $game->save();
            // DB::table('user_game_roles')->where(['game_id'=>$game_id, 'is_active' => 1 ])->update(['is_active' => 2]);  //–ø–æ–±–µ–¥–∏–ª–∏
        }
        return $result;
    }

    public static function hasRightToStart($user_id, $group_id)
    {
        $group = BotGroup::where('id', $group_id)->first();
        if (!$group) return false;
        if ($group->who_add == $user_id) return true;
        $isRight = UserProduct::where(['user_id' => $user_id, 'group_id' => $group_id])->whereIn('product_id', [1, 2, 3, 4])
            ->whereNotNull('was_used')->where('is_deactivate', 0)->where('avail_finish_moment', '>', date('Y-m-d H:i:s'))->first();
        if (!$isRight) {
            $bot = AppBot::appBot();
            try {
                $chatMember = $bot->getApi()->getChatMember(['chat_id' => $group_id, 'user_id' => $user_id]);
                if ($chatMember && $chatMember->status == 'administrator') return true;
            }
            catch(Exception $e) {
                $mess = ['text'=>"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"];
                $bot->sendAnswer([$mess],$group_id);
                return false;
            }
        }
        return ($isRight ? true : false);
    }
    public static function isGroupAdmin($user_id, $group_id)
    {
        $group = BotGroup::where('id', $group_id)->first();
        if (!$group) return false;
        if ($group->who_add == $user_id) return true;
        return false;
    }
    public static function editRegistrationMessageStandart($game)
    {
        $gamers = GameUser::with('user')->where('game_id', $game->id)->get();
        $gmCount = $gamers->count();
        if (!$game->options) return $gamers;
        $options = json_decode($game->options, true);
        $txtUsers = [];
        foreach ($gamers as $gamer) {            
            $txtUsers[] = Game::userUrlName($gamer->user);
        }
        $grpmess['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n" . implode("\n", $txtUsers) .
            "\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: $gmCount –∏–≥—Ä–æ–∫–æ–≤";
        $grpmess['reply_markup'] = json_encode(['inline_keyboard' => [[['text' => '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', 'url' => "https://t.me/".config('app.bot_nick')."?start=game_" . $game->id]]]]);
        if (isset($options['message_id'])) {
            $grpmess['chat_id'] = $game->group_id;
            $grpmess['message_id'] = $options['message_id'];
            $grpmess['parse_mode'] = 'HTML';

            //Log::info('editRegistrationMessageStandart telegram info', ['error' => print_r($grpmess, true)]);
            $bot = AppBot::appBot();
            try {
                $bot->getApi()->editMessageText($grpmess);
            }
            catch(Exception $e) {
                //Log::info('editRegistrationMessageStandart error', ['error' => print_r($e, true)]);
                $res['text'] = "–Ø @Windmafia_bot –Ω–µ —Å–º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ!";
                $bot->sendAnswer([$res],$grpmess['chat_id']);
            }            
        }
        return $gamers;
    }
    public static function editRegistrationMessageTeam($game)
    {
        $gamers = GameUser::with('user')->where('game_id', $game->id)->where('is_active', 1)->orderBy('team')->orderBy('id')->get();
        if (!$game->options) return $gamers;
        $gmCount = $gamers->count();
        $options = json_decode($game->options, true);
        $txtUsers = [];
        foreach ($gamers as $gamer) {
            $prefTeam = isset(Game::COMMAND_COLORS[$gamer->team]) ? Game::COMMAND_COLORS[$gamer->team] . ' ' : '';
            $txtUsers[] = $prefTeam . Game::userUrlName($gamer->user);
        }
        $grpmess['text'] = "–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n" . implode("\n", $txtUsers) .
            "\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: $gmCount –∏–≥—Ä–æ–∫–æ–≤";
        $ikb = [];
        foreach (Game::COMMAND_COLORS as $k => $v) {
            $ikb['inline_keyboard'][] = [['text' => $v . ' –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', 'url' => "https://t.me/".config('app.bot_nick')."?start=teamgm_" . $game->id . "_" . $k]];
        }
        $grpmess['reply_markup'] = json_encode($ikb);
        if (isset($options['message_id'])) {
            $grpmess['chat_id'] = $game->group_id;
            $grpmess['message_id'] = $options['message_id'];
            $grpmess['parse_mode'] = 'HTML';
            $bot = AppBot::appBot();
            try {
                $bot->getApi()->editMessageText($grpmess);
            }
            catch(Exception $e) {
                //Log::info('editRegistrationMessageTeam error', ['error' => print_r($e, true)]);
                $res['text'] = "–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π";
                $bot->sendAnswer([$res],$game->group_id);
            }
        }
        return $gamers;
    }
    public static function editRegistrationMessage($game)
    {
        if ($game->is_team) return self::editRegistrationMessageTeam($game);
        else return self::editRegistrationMessageStandart($game);
    }
}
